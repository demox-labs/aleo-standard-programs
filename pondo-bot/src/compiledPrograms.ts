/*** GENERATED FILE - DO NOT EDIT ***/
/*** This is generated by the copyFiles.js script ***/

export const pondoPrograms = [
  "credits.aleo",
  "multi_token_support_program_v02.aleo",
  "pondo_oracle.aleo",
  "pondo_staked_aleo_token.aleo",
  "pondo_token.aleo",
  "pondo_delegator1.aleo",
  "pondo_delegator2.aleo",
  "pondo_delegator3.aleo",
  "pondo_delegator4.aleo",
  "pondo_delegator5.aleo",
  "pondo_core_protocol.aleo",
  "reference_delegator.aleo",
  "test_program.aleo"
];

export const pondoDependencyTree: { [key: string]: string[] } = {
  "multi_token_support_program_v02.aleo": [
    "credits.aleo"
  ],
  "pondo_core_protocol.aleo": [
    "credits.aleo",
    "multi_token_support_program_v02.aleo",
    "pondo_oracle.aleo",
    "pondo_staked_aleo_token.aleo",
    "pondo_token.aleo",
    "pondo_delegator1.aleo",
    "pondo_delegator2.aleo",
    "pondo_delegator3.aleo",
    "pondo_delegator4.aleo",
    "pondo_delegator5.aleo"
  ],
  "pondo_oracle.aleo": [
    "credits.aleo"
  ],
  "pondo_staked_aleo_token.aleo": [
    "credits.aleo",
    "multi_token_support_program_v02.aleo"
  ],
  "pondo_token.aleo": [
    "credits.aleo",
    "multi_token_support_program_v02.aleo"
  ],
  "reference_delegator.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator1.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator2.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator3.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator4.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "pondo_delegator5.aleo": [
    "credits.aleo",
    "pondo_oracle.aleo"
  ],
  "test_program.aleo": [
    "credits.aleo",
    "multi_token_support_program_v02.aleo",
    "pondo_oracle.aleo",
    "pondo_staked_aleo_token.aleo",
    "pondo_token.aleo",
    "pondo_delegator1.aleo",
    "pondo_delegator2.aleo",
    "pondo_delegator3.aleo",
    "pondo_delegator4.aleo",
    "pondo_delegator5.aleo",
    "pondo_core_protocol.aleo"
  ]
};

export const pondoProgramToCode: { [key: string]: string } = {
  "multi_token_support_program_v02.aleo": "import credits.aleo;\nprogram multi_token_support_program_v02.aleo;\n\n\nrecord Token:\n    owner as address.private;\n    amount as u128.private;\n    token_id as field.private;\n    external_authorization_required as boolean.private;\n    authorized_until as u32.private;\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\nstruct Allowance:\n    account as address;\n    spender as address;\n    token_id as field;\n\n\nmapping registered_tokens:\n\tkey as field.public;\n\tvalue as TokenMetadata.public;\n\n\nmapping balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping authorized_balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping allowances:\n\tkey as field.public;\n\tvalue as u128.public;\n\n\nmapping roles:\n\tkey as field.public;\n\tvalue as u8.public;\n\n\nfunction transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async transfer_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/transfer_public.future;\n\nfinalize transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    get authorized_balances[r5] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r5];\n    cast r1 r0 into r13 as TokenOwner;\n    hash.bhp256 r13 into r14 as field;\n    get registered_tokens[r0] into r15;\n    ternary r15.external_authorization_required 0u32 4294967295u32 into r16;\n    cast r0 r1 0u128 r16 into r17 as Balance;\n    get.or_use balances[r14] r17 into r18;\n    get.or_use authorized_balances[r14] r17 into r19;\n    ternary r15.external_authorization_required r18.token_id r19.token_id into r20;\n    ternary r15.external_authorization_required r18.account r19.account into r21;\n    ternary r15.external_authorization_required r18.balance r19.balance into r22;\n    ternary r15.external_authorization_required r18.authorized_until r19.authorized_until into r23;\n    cast r20 r21 r22 r23 into r24 as Balance;\n    add r24.balance r2 into r25;\n    cast r0 r1 r25 r24.authorized_until into r26 as Balance;\n    branch.eq r15.external_authorization_required false to end_then_0_0;\n    set r26 into balances[r14];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    set r26 into authorized_balances[r14];\n    position end_otherwise_0_1;\n\n\n\n\nfunction transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async transfer_public_as_signer r0 r1 r2 self.signer into r3;\n    output r3 as multi_token_support_program_v02.aleo/transfer_public_as_signer.future;\n\nfinalize transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    get authorized_balances[r5] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r5];\n    cast r1 r0 into r13 as TokenOwner;\n    hash.bhp256 r13 into r14 as field;\n    get registered_tokens[r0] into r15;\n    ternary r15.external_authorization_required 0u32 4294967295u32 into r16;\n    cast r0 r1 0u128 r16 into r17 as Balance;\n    get.or_use balances[r14] r17 into r18;\n    get.or_use authorized_balances[r14] r17 into r19;\n    ternary r15.external_authorization_required r18.token_id r19.token_id into r20;\n    ternary r15.external_authorization_required r18.account r19.account into r21;\n    ternary r15.external_authorization_required r18.balance r19.balance into r22;\n    ternary r15.external_authorization_required r18.authorized_until r19.authorized_until into r23;\n    cast r20 r21 r22 r23 into r24 as Balance;\n    add r24.balance r2 into r25;\n    cast r0 r1 r25 r24.authorized_until into r26 as Balance;\n    branch.eq r15.external_authorization_required false to end_then_0_2;\n    set r26 into balances[r14];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    set r26 into authorized_balances[r14];\n    position end_otherwise_0_3;\n\n\n\n\nfunction transfer_private:\n    input r0 as address.private;\n    input r1 as u128.private;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    ternary r2.external_authorization_required 0u32 4294967295u32 into r5;\n    cast r0 r1 r2.token_id r2.external_authorization_required r5 into r6 as Token.record;\n    async transfer_private r2.external_authorization_required r2.authorized_until into r7;\n    output r4 as Token.record;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v02.aleo/transfer_private.future;\n\nfinalize transfer_private:\n    input r0 as boolean.public;\n    input r1 as u32.public;\n    lte block.height r1 into r2;\n    not r0 into r3;\n    or r2 r3 into r4;\n    assert.eq r4 true;\n\n\n\n\nfunction transfer_private_to_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    async transfer_private_to_public r2.token_id r0 r1 r2.authorized_until r2.external_authorization_required into r5;\n    output r4 as Token.record;\n    output r5 as multi_token_support_program_v02.aleo/transfer_private_to_public.future;\n\nfinalize transfer_private_to_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as boolean.public;\n    lte block.height r3 into r5;\n    not r4 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    cast r1 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get registered_tokens[r0] into r10;\n    ternary r10.external_authorization_required 0u32 4294967295u32 into r11;\n    cast r0 r1 0u128 r11 into r12 as Balance;\n    get.or_use balances[r9] r12 into r13;\n    get.or_use authorized_balances[r9] r12 into r14;\n    ternary r10.external_authorization_required r13.token_id r14.token_id into r15;\n    ternary r10.external_authorization_required r13.account r14.account into r16;\n    ternary r10.external_authorization_required r13.balance r14.balance into r17;\n    ternary r10.external_authorization_required r13.authorized_until r14.authorized_until into r18;\n    cast r15 r16 r17 r18 into r19 as Balance;\n    add r19.balance r2 into r20;\n    cast r0 r1 r20 r19.authorized_until into r21 as Balance;\n    branch.eq r10.external_authorization_required false to end_then_0_4;\n    set r21 into balances[r9];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    set r21 into authorized_balances[r9];\n    position end_otherwise_0_5;\n\n\n\n\nfunction transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as address.private;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    ternary r3 0u32 4294967295u32 into r4;\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\n    async transfer_public_to_private r0 r2 self.caller r3 into r6;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v02.aleo/transfer_public_to_private.future;\n\nfinalize transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    input r3 as boolean.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r4.external_authorization_required r3;\n    cast r2 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get authorized_balances[r6] into r7;\n    get registered_tokens[r0] into r8;\n    lte block.height r7.authorized_until into r9;\n    not r8.external_authorization_required into r10;\n    or r9 r10 into r11;\n    assert.eq r11 true;\n    sub r7.balance r1 into r12;\n    cast r0 r2 r12 r7.authorized_until into r13 as Balance;\n    set r13 into authorized_balances[r6];\n\n\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as multi_token_support_program_v02.aleo/initialize.future;\n\nfinalize initialize:\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field 1095517519u128 1095517519u128 6u8 1_500_000_000_000_000u128 1_500_000_000_000_000u128 multi_token_support_program_v02.aleo false multi_token_support_program_v02.aleo into r0 as TokenMetadata;\n    set r0 into registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field];\n\n\n\n\nfunction register_token:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    input r3 as u8.public;\n    input r4 as u128.public;\n    input r5 as boolean.public;\n    input r6 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r7;\n    assert.eq r7 true;\n    cast r0 r1 r2 r3 0u128 r4 self.caller r5 r6 into r8 as TokenMetadata;\n    async register_token r8 into r9;\n    output r9 as multi_token_support_program_v02.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as TokenMetadata.public;\n    contains registered_tokens[r0.token_id] into r1;\n    assert.eq r1 false;\n    set r0 into registered_tokens[r0.token_id];\n\n\n\n\nfunction update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    async update_token_management r0 r1 r2 self.caller into r4;\n    output r4 as multi_token_support_program_v02.aleo/update_token_management.future;\n\nfinalize update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r3 r4.admin;\n    cast r0 r4.name r4.symbol r4.decimals r4.supply r4.max_supply r1 r4.external_authorization_required r2 into r5 as TokenMetadata;\n    set r5 into registered_tokens[r0];\n\n\n\n\nfunction set_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u8.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    async set_role r0 r1 r2 self.caller into r4;\n    output r4 as multi_token_support_program_v02.aleo/set_role.future;\n\nfinalize set_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u8.public;\n    input r3 as address.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r3 r4.admin;\n    cast r1 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    set r2 into roles[r6];\n\n\n\n\nfunction remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    async remove_role r0 r1 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/remove_role.future;\n\nfinalize remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    get registered_tokens[r0] into r3;\n    assert.eq r2 r3.admin;\n    cast r1 r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    remove roles[r5];\n\n\n\n\nfunction mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r4;\n    assert.eq r4 true;\n    async mint_public r0 r1 r2 r3 self.caller into r5;\n    output r5 as multi_token_support_program_v02.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    get registered_tokens[r0] into r5;\n    is.eq r4 r5.admin into r6;\n    not r6 into r7;\n    branch.eq r7 false to end_then_0_6;\n    cast r4 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get roles[r9] into r10;\n    is.eq r10 1u8 into r11;\n    is.eq r10 3u8 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    add r5.supply r2 into r14;\n    lte r14 r5.max_supply into r15;\n    assert.eq r15 true;\n    cast r1 r0 into r16 as TokenOwner;\n    hash.bhp256 r16 into r17 as field;\n    cast r0 r1 0u128 r3 into r18 as Balance;\n    get.or_use balances[r17] r18 into r19;\n    get.or_use authorized_balances[r17] r18 into r20;\n    ternary r5.external_authorization_required r19.token_id r20.token_id into r21;\n    ternary r5.external_authorization_required r19.account r20.account into r22;\n    ternary r5.external_authorization_required r19.balance r20.balance into r23;\n    ternary r5.external_authorization_required r19.authorized_until r20.authorized_until into r24;\n    cast r21 r22 r23 r24 into r25 as Balance;\n    add r25.balance r2 into r26;\n    cast r0 r1 r26 r25.authorized_until into r27 as Balance;\n    branch.eq r5.external_authorization_required false to end_then_0_8;\n    set r27 into balances[r17];\n    branch.eq true true to end_otherwise_0_9;\n    position end_then_0_8;\n    set r27 into authorized_balances[r17];\n    position end_otherwise_0_9;\n    cast r0 r5.name r5.symbol r5.decimals r14 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r28 as TokenMetadata;\n    set r28 into registered_tokens[r0];\n\n\n\n\nfunction mint_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    input r4 as u32.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r5;\n    assert.eq r5 true;\n    cast r1 r2 r0 r3 r4 into r6 as Token.record;\n    async mint_private r0 r2 r3 r4 self.caller into r7;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v02.aleo/mint_private.future;\n\nfinalize mint_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as boolean.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    get registered_tokens[r0] into r5;\n    is.eq r4 r5.admin into r6;\n    not r6 into r7;\n    branch.eq r7 false to end_then_0_10;\n    cast r4 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    get roles[r9] into r10;\n    is.eq r10 1u8 into r11;\n    is.eq r10 3u8 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    branch.eq true true to end_otherwise_0_11;\n    position end_then_0_10;\n    position end_otherwise_0_11;\n    add r5.supply r1 into r14;\n    lte r14 r5.max_supply into r15;\n    assert.eq r15 true;\n    assert.eq r5.external_authorization_required r2;\n    is.eq r3 0u32 into r16;\n    not r5.external_authorization_required into r17;\n    or r16 r17 into r18;\n    assert.eq r18 true;\n    cast r0 r5.name r5.symbol r5.decimals r14 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r19 as TokenMetadata;\n    set r19 into registered_tokens[r0];\n\n\n\n\nfunction burn_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    cast r1 r0 into r4 as TokenOwner;\n    async burn_public r4 r2 self.caller into r5;\n    output r5 as multi_token_support_program_v02.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    get registered_tokens[r0.token_id] into r3;\n    is.neq r2 r3.admin into r4;\n    branch.eq r4 false to end_then_0_12;\n    cast r2 r0.token_id into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get roles[r6] into r7;\n    is.eq r7 2u8 into r8;\n    is.eq r7 3u8 into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    branch.eq true true to end_otherwise_0_13;\n    position end_then_0_12;\n    position end_otherwise_0_13;\n    sub r3.supply r1 into r11;\n    cast r3.token_id r3.name r3.symbol r3.decimals r11 r3.max_supply r3.admin r3.external_authorization_required r3.external_authorization_party into r12 as TokenMetadata;\n    set r12 into registered_tokens[r0.token_id];\n    cast r0.token_id r0.account 0u128 0u32 into r13 as Balance;\n    hash.bhp256 r0 into r14 as field;\n    get.or_use authorized_balances[r14] r13 into r15;\n    gt r15.balance 0u128 into r16;\n    branch.eq r16 false to end_then_0_14;\n    gt r15.balance r1 into r17;\n    branch.eq r17 false to end_then_1_16;\n    sub r15.balance r1 into r18;\n    cast r0.token_id r0.account r18 r15.authorized_until into r19 as Balance;\n    set r19 into authorized_balances[r14];\n    branch.eq true true to end_otherwise_1_17;\n    position end_then_1_16;\n    remove authorized_balances[r14];\n    sub r1 r15.balance into r20;\n    get balances[r14] into r21;\n    sub r21.balance r20 into r22;\n    cast r0.token_id r0.account r22 r21.authorized_until into r23 as Balance;\n    set r23 into balances[r14];\n    position end_otherwise_1_17;\n    branch.eq true true to end_otherwise_0_15;\n    position end_then_0_14;\n    get balances[r14] into r24;\n    sub r24.balance r1 into r25;\n    cast r0.token_id r0.account r25 r24.authorized_until into r26 as Balance;\n    set r26 into balances[r14];\n    position end_otherwise_0_15;\n\n\n\n\nfunction burn_private:\n    input r0 as Token.record;\n    input r1 as u128.public;\n    is.neq r0.token_id 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    sub r0.amount r1 into r3;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\n    async burn_private r0.token_id r1 self.caller into r5;\n    output r4 as Token.record;\n    output r5 as multi_token_support_program_v02.aleo/burn_private.future;\n\nfinalize burn_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    get registered_tokens[r0] into r3;\n    is.eq r2 r3.admin into r4;\n    not r4 into r5;\n    branch.eq r5 false to end_then_0_18;\n    cast r2 r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    get roles[r7] into r8;\n    is.eq r8 2u8 into r9;\n    is.eq r8 3u8 into r10;\n    or r9 r10 into r11;\n    assert.eq r11 true;\n    branch.eq true true to end_otherwise_0_19;\n    position end_then_0_18;\n    position end_otherwise_0_19;\n    sub r3.supply r1 into r12;\n    cast r0 r3.name r3.symbol r3.decimals r12 r3.max_supply r3.admin r3.external_authorization_required r3.external_authorization_party into r13 as TokenMetadata;\n    set r13 into registered_tokens[r0];\n\n\n\n\nfunction prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    async prehook_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/prehook_public.future;\n\nfinalize prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    input r3 as address.public;\n    get registered_tokens[r0.token_id] into r4;\n    is.eq r3 r4.external_authorization_party into r5;\n    assert.eq r5 true;\n    cast r0.token_id r0.account 0u128 0u32 into r6 as Balance;\n    hash.bhp256 r0 into r7 as field;\n    get.or_use balances[r7] r6 into r8;\n    get.or_use authorized_balances[r7] r6 into r9;\n    lt r9.authorized_until block.height into r10;\n    add r8.balance r9.balance into r11;\n    ternary r10 r11 r8.balance into r12;\n    ternary r10 0u128 r9.balance into r13;\n    sub r12 r1 into r14;\n    add r13 r1 into r15;\n    cast r0.token_id r0.account r15 r2 into r16 as Balance;\n    set r16 into authorized_balances[r7];\n    cast r0.token_id r0.account r14 r8.authorized_until into r17 as Balance;\n    set r17 into balances[r7];\n\n\n\n\nfunction prehook_private:\n    input r0 as Token.record;\n    input r1 as u128.private;\n    input r2 as u32.private;\n    sub r0.amount r1 into r3;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r2 into r5 as Token.record;\n    async prehook_private r0.token_id self.caller into r6;\n    output r4 as Token.record;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v02.aleo/prehook_private.future;\n\nfinalize prehook_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    get registered_tokens[r0] into r2;\n    is.eq r1 r2.external_authorization_party into r3;\n    assert.eq r3 true;\n\n\n\n\nfunction approve_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async approve_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/approve_public.future;\n\nfinalize approve_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r0 into r4 as TokenOwner;\n    cast r3 r1 r0 into r5 as Allowance;\n    hash.bhp256 r5 into r6 as field;\n    get.or_use allowances[r6] 0u128 into r7;\n    add r7 r2 into r8;\n    set r8 into allowances[r6];\n\n\n\n\nfunction unapprove_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    async unapprove_public r0 r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/unapprove_public.future;\n\nfinalize unapprove_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    cast r3 r1 r0 into r4 as Allowance;\n    hash.bhp256 r4 into r5 as field;\n    get allowances[r5] into r6;\n    sub r6 r2 into r7;\n    set r7 into allowances[r5];\n\n\n\n\nfunction transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    async transfer_from_public r0 r1 r2 r3 self.caller into r4;\n    output r4 as multi_token_support_program_v02.aleo/transfer_from_public.future;\n\nfinalize transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    input r4 as address.public;\n    cast r1 r4 r0 into r5 as Allowance;\n    hash.bhp256 r5 into r6 as field;\n    get allowances[r6] into r7;\n    sub r7 r3 into r8;\n    set r8 into allowances[r6];\n    cast r1 r0 into r9 as TokenOwner;\n    hash.bhp256 r9 into r10 as field;\n    get authorized_balances[r10] into r11;\n    get registered_tokens[r0] into r12;\n    lte block.height r11.authorized_until into r13;\n    not r12.external_authorization_required into r14;\n    or r13 r14 into r15;\n    assert.eq r15 true;\n    sub r11.balance r3 into r16;\n    cast r0 r1 r16 r11.authorized_until into r17 as Balance;\n    set r17 into authorized_balances[r10];\n    cast r2 r0 into r18 as TokenOwner;\n    hash.bhp256 r18 into r19 as field;\n    get registered_tokens[r0] into r20;\n    ternary r20.external_authorization_required 0u32 4294967295u32 into r21;\n    cast r0 r2 0u128 r21 into r22 as Balance;\n    get.or_use balances[r19] r22 into r23;\n    get.or_use authorized_balances[r19] r22 into r24;\n    ternary r20.external_authorization_required r23.token_id r24.token_id into r25;\n    ternary r20.external_authorization_required r23.account r24.account into r26;\n    ternary r20.external_authorization_required r23.balance r24.balance into r27;\n    ternary r20.external_authorization_required r23.authorized_until r24.authorized_until into r28;\n    cast r25 r26 r27 r28 into r29 as Balance;\n    add r29.balance r3 into r30;\n    cast r0 r2 r30 r29.authorized_until into r31 as Balance;\n    branch.eq r20.external_authorization_required false to end_then_0_20;\n    set r31 into balances[r19];\n    branch.eq true true to end_otherwise_0_21;\n    position end_then_0_20;\n    set r31 into authorized_balances[r19];\n    position end_otherwise_0_21;\n\n\n\n\nfunction transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.private;\n    input r3 as u128.public;\n    input r4 as boolean.public;\n    ternary r4 0u32 4294967295u32 into r5;\n    cast r2 r3 r0 r4 r5 into r6 as Token.record;\n    async transfer_from_public_to_private r0 r1 r3 self.caller r4 into r7;\n    output r6 as Token.record;\n    output r7 as multi_token_support_program_v02.aleo/transfer_from_public_to_private.future;\n\nfinalize transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    input r4 as boolean.public;\n    get registered_tokens[r0] into r5;\n    assert.eq r5.external_authorization_required r4;\n    cast r1 r3 r0 into r6 as Allowance;\n    hash.bhp256 r6 into r7 as field;\n    get allowances[r7] into r8;\n    sub r8 r2 into r9;\n    set r9 into allowances[r7];\n    cast r1 r0 into r10 as TokenOwner;\n    hash.bhp256 r10 into r11 as field;\n    get authorized_balances[r11] into r12;\n    get registered_tokens[r0] into r13;\n    lte block.height r12.authorized_until into r14;\n    not r13.external_authorization_required into r15;\n    or r14 r15 into r16;\n    assert.eq r16 true;\n    sub r12.balance r2 into r17;\n    cast r0 r1 r17 r12.authorized_until into r18 as Balance;\n    set r18 into authorized_balances[r11];\n\n\n\n\nfunction deposit_credits_public:\n    input r0 as u64.public;\n    call credits.aleo/transfer_public_as_signer multi_token_support_program_v02.aleo r0 into r1;\n    cast r0 into r2 as u128;\n    async deposit_credits_public r1 r2 self.signer into r3;\n    output r3 as multi_token_support_program_v02.aleo/deposit_credits_public.future;\n\nfinalize deposit_credits_public:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as u128.public;\n    input r2 as address.public;\n    await r0;\n    cast r2 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 0u128 4294967295u32 into r5 as Balance;\n    get.or_use authorized_balances[r4] r5 into r6;\n    add r6.balance r1 into r7;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 r7 r6.authorized_until into r8 as Balance;\n    set r8 into authorized_balances[r4];\n\n\n\n\nfunction deposit_credits_private:\n    input r0 as credits.aleo/credits.record;\n    input r1 as u64.private;\n    call credits.aleo/transfer_private_to_public r0 multi_token_support_program_v02.aleo r1 into r2 r3;\n    cast r1 into r4 as u128;\n    cast r0.owner r4 3443843282313283355522573239085696902919850365217539366784739393210722344986field false 4294967295u32 into r5 as Token.record;\n    async deposit_credits_private r3 into r6;\n    output r2 as credits.aleo/credits.record;\n    output r5 as Token.record;\n    output r6 as multi_token_support_program_v02.aleo/deposit_credits_private.future;\n\nfinalize deposit_credits_private:\n    input r0 as credits.aleo/transfer_private_to_public.future;\n    await r0;\n\n\n\n\nfunction withdraw_credits_public:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public self.caller r0 into r1;\n    cast r0 into r2 as u128;\n    async withdraw_credits_public r1 r2 self.caller into r3;\n    output r3 as multi_token_support_program_v02.aleo/withdraw_credits_public.future;\n\nfinalize withdraw_credits_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as u128.public;\n    input r2 as address.public;\n    await r0;\n    cast r2 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    get authorized_balances[r4] into r5;\n    sub r5.balance r1 into r6;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field r2 r6 r5.authorized_until into r7 as Balance;\n    set r7 into authorized_balances[r4];\n\n\n\n\nfunction withdraw_credits_private:\n    input r0 as Token.record;\n    input r1 as u64.private;\n    is.eq r0.token_id 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    call credits.aleo/transfer_public_to_private r0.owner r1 into r3 r4;\n    cast r1 into r5 as u128;\n    sub r0.amount r5 into r6;\n    cast r0.owner r6 r0.token_id r0.external_authorization_required r0.authorized_until into r7 as Token.record;\n    async withdraw_credits_private r4 into r8;\n    output r7 as Token.record;\n    output r3 as credits.aleo/credits.record;\n    output r8 as multi_token_support_program_v02.aleo/withdraw_credits_private.future;\n\nfinalize withdraw_credits_private:\n    input r0 as credits.aleo/transfer_public_to_private.future;\n    await r0;\n\n",
  "pondo_core_protocol.aleo": "import credits.aleo;\nimport multi_token_support_program_v02.aleo;\nimport pondo_oracle.aleo;\nimport pondo_staked_aleo_token.aleo;\nimport pondo_token.aleo;\nimport pondo_delegator1.aleo;\nimport pondo_delegator2.aleo;\nimport pondo_delegator3.aleo;\nimport pondo_delegator4.aleo;\nimport pondo_delegator5.aleo;\nprogram pondo_core_protocol.aleo;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\nstruct unbond_state:\n    microcredits as u64;\n    height as u32;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\nstruct withdrawal_state:\n    microcredits as u64;\n    claim_block as u32;\n\n\nmapping validator_set:\n\tkey as u8.public;\n\tvalue as [validator_state; 5u32].public;\n\n\nmapping protocol_state:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping balances:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping owed_commission:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping last_rebalance_epoch:\n\tkey as u8.public;\n\tvalue as u32.public;\n\n\nmapping withdrawals:\n\tkey as address.public;\n\tvalue as withdrawal_state.public;\n\n\nfunction initialize:\n    input r0 as u64.private;\n    gte r0 102u64 into r1;\n    assert.eq r1 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r0 into r2;\n    call pondo_staked_aleo_token.aleo/register_token into r3;\n    call pondo_staked_aleo_token.aleo/mint_public r0 self.signer into r4;\n    call pondo_token.aleo/initialize_token into r5;\n    call pondo_delegator1.aleo/initialize into r6;\n    call pondo_delegator2.aleo/initialize into r7;\n    call pondo_delegator3.aleo/initialize into r8;\n    call pondo_delegator4.aleo/initialize into r9;\n    call pondo_delegator5.aleo/initialize into r10;\n    async initialize r2 r3 r4 r5 r6 r7 r8 r9 r10 r0 into r11;\n    output r11 as pondo_core_protocol.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as pondo_staked_aleo_token.aleo/register_token.future;\n    input r2 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r3 as pondo_token.aleo/initialize_token.future;\n    input r4 as pondo_delegator1.aleo/initialize.future;\n    input r5 as pondo_delegator2.aleo/initialize.future;\n    input r6 as pondo_delegator3.aleo/initialize.future;\n    input r7 as pondo_delegator4.aleo/initialize.future;\n    input r8 as pondo_delegator5.aleo/initialize.future;\n    input r9 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    set r9 into balances[0u8];\n    set 0u64 into balances[1u8];\n    set 0u64 into balances[2u8];\n    set 0u64 into owed_commission[0u8];\n    set 2u8 into protocol_state[0u8];\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r10 as [address; 10u32];\n    get.or_use pondo_oracle.aleo/top_validators[0u8] r10 into r11;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r12 as validator_datum;\n    get.or_use pondo_oracle.aleo/validator_data[r11[0u32]] r12 into r13;\n    get.or_use pondo_oracle.aleo/validator_data[r11[1u32]] r12 into r14;\n    get.or_use pondo_oracle.aleo/validator_data[r11[2u32]] r12 into r15;\n    get.or_use pondo_oracle.aleo/validator_data[r11[3u32]] r12 into r16;\n    get.or_use pondo_oracle.aleo/validator_data[r11[4u32]] r12 into r17;\n    cast r13.validator r13.commission into r18 as validator_state;\n    cast r14.validator r14.commission into r19 as validator_state;\n    cast r15.validator r15.commission into r20 as validator_state;\n    cast r16.validator r16.commission into r21 as validator_state;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast  r18 r19 r20 r21 r22 into r23 as [validator_state; 5u32];\n    set r23 into validator_set[1u8];\n    div block.height 120_960u32 into r24;\n    set r24 into last_rebalance_epoch[0u8];\n\n\n\n\nfunction prep_rebalance:\n    call pondo_delegator1.aleo/prep_rebalance into r0;\n    call pondo_delegator2.aleo/prep_rebalance into r1;\n    call pondo_delegator3.aleo/prep_rebalance into r2;\n    call pondo_delegator4.aleo/prep_rebalance into r3;\n    call pondo_delegator5.aleo/prep_rebalance into r4;\n    async prep_rebalance r0 r1 r2 r3 r4 into r5;\n    output r5 as pondo_core_protocol.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    input r0 as pondo_delegator1.aleo/prep_rebalance.future;\n    input r1 as pondo_delegator2.aleo/prep_rebalance.future;\n    input r2 as pondo_delegator3.aleo/prep_rebalance.future;\n    input r3 as pondo_delegator4.aleo/prep_rebalance.future;\n    input r4 as pondo_delegator5.aleo/prep_rebalance.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    div block.height 120_960u32 into r5;\n    get last_rebalance_epoch[0u8] into r6;\n    gt r5 r6 into r7;\n    assert.eq r7 true;\n    set r5 into last_rebalance_epoch[0u8];\n    get protocol_state[0u8] into r8;\n    is.eq r8 0u8 into r9;\n    assert.eq r9 true;\n    set 1u8 into protocol_state[0u8];\n    rem block.height 120_960u32 into r10;\n    lt r10 17_280u32 into r11;\n    is.eq r6 4294967295u32 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r14 as [address; 10u32];\n    get.or_use pondo_oracle.aleo/top_validators[0u8] r14 into r15;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r16 as validator_datum;\n    get.or_use pondo_oracle.aleo/validator_data[r15[0u32]] r16 into r17;\n    get.or_use pondo_oracle.aleo/validator_data[r15[1u32]] r16 into r18;\n    get.or_use pondo_oracle.aleo/validator_data[r15[2u32]] r16 into r19;\n    get.or_use pondo_oracle.aleo/validator_data[r15[3u32]] r16 into r20;\n    get.or_use pondo_oracle.aleo/validator_data[r15[4u32]] r16 into r21;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast r18.validator r18.commission into r23 as validator_state;\n    cast r19.validator r19.commission into r24 as validator_state;\n    cast r20.validator r20.commission into r25 as validator_state;\n    cast r21.validator r21.commission into r26 as validator_state;\n    cast  r22 r23 r24 r25 r26 into r27 as [validator_state; 5u32];\n    set r27 into validator_set[1u8];\n\n\n\n\n\n\n\n\nfunction deposit_public_as_signer:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r0 into r4;\n    call pondo_staked_aleo_token.aleo/mint_public r1 self.signer into r5;\n    async deposit_public_as_signer r4 r5 r0 r1 into r6;\n    output r6 as pondo_core_protocol.aleo/deposit_public_as_signer.future;\n\nfinalize deposit_public_as_signer:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    await r0;\n    await r1;\n    cast pondo_core_protocol.aleo 0u64 into r4 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r4 into r5;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r4 into r6;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r4 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r4 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r4 into r9;\n    cast 0u64 0u32 into r10 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r10 into r11;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r10 into r12;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r10 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r10 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r10 into r15;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r16;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r17;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r20;\n    add r5.microcredits r6.microcredits into r21;\n    add r21 r7.microcredits into r22;\n    add r22 r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r16 r17 into r25;\n    add r25 r18 into r26;\n    add r26 r19 into r27;\n    add r27 r20 into r28;\n    add r11.microcredits r12.microcredits into r29;\n    add r29 r13.microcredits into r30;\n    add r30 r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    get balances[1u8] into r33;\n    add r24 r28 into r34;\n    add r34 r32 into r35;\n    sub r35 r33 into r36;\n    get balances[0u8] into r37;\n    get owed_commission[0u8] into r38;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r39;\n    cast r38 into r40 as u128;\n    add r39.supply r40 into r41;\n    cast r3 into r42 as u128;\n    sub r41 r42 into r43;\n    gt r36 r37 into r44;\n    cast r36 into r45 as i64;\n    cast r37 into r46 as i64;\n    sub r45 r46 into r47;\n    ternary r44 r47 0i64 into r48;\n    cast r48 into r49 as u128;\n    mul r49 1000u128 into r50;\n    div r50 10_000u128 into r51;\n    cast r51 into r52 as u64;\n    cast r48 into r53 as u64;\n    sub r53 r52 into r54;\n    add r37 r54 into r55;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r56;\n    get balances[2u8] into r57;\n    get protocol_state[0u8] into r58;\n    cast r56 into r59 as i64;\n    cast r2 into r60 as i64;\n    cast r57 into r61 as i64;\n    is.neq r58 2u8 into r62;\n    sub r59 r60 into r63;\n    sub r63 r61 into r64;\n    cast r55 into r65 as i64;\n    sub r59 r65 into r66;\n    sub r66 r60 into r67;\n    sub r67 r61 into r68;\n    ternary r62 r64 r68 into r69;\n    cast r55 into r70 as u128;\n    cast r69 into r71 as u128;\n    cast r52 into r72 as u128;\n    add r70 r71 into r73;\n    add r73 r72 into r74;\n    mul r43 r74 into r75;\n    div r75 r73 into r76;\n    sub r76 r43 into r77;\n    cast r77 into r78 as u64;\n    add r38 r78 into r79;\n    set r79 into owed_commission[0u8];\n    cast r78 into r80 as u128;\n    add r43 r80 into r81;\n    add r55 r52 into r82;\n    set r82 into balances[0u8];\n    cast r82 into r83 as u128;\n    cast r69 into r84 as u128;\n    cast r2 into r85 as u128;\n    add r83 r84 into r86;\n    add r86 r85 into r87;\n    mul r81 r87 into r88;\n    div r88 r86 into r89;\n    sub r89 r81 into r90;\n    cast r90 into r91 as u64;\n    gte r91 r3 into r92;\n    assert.eq r92 true;\n\n\n\n\nfunction deposit_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    cast r0 into r4 as u128;\n    call multi_token_support_program_v02.aleo/transfer_from_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller pondo_core_protocol.aleo r4 into r5;\n    call multi_token_support_program_v02.aleo/withdraw_credits_public r0 into r6;\n    call pondo_staked_aleo_token.aleo/mint_public r1 self.caller into r7;\n    async deposit_public r5 r6 r7 r0 r1 into r8;\n    output r8 as pondo_core_protocol.aleo/deposit_public.future;\n\nfinalize deposit_public:\n    input r0 as multi_token_support_program_v02.aleo/transfer_from_public.future;\n    input r1 as multi_token_support_program_v02.aleo/withdraw_credits_public.future;\n    input r2 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r3 as u64.public;\n    input r4 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    cast pondo_core_protocol.aleo 0u64 into r5 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r5 into r6;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r5 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r5 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r5 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r5 into r10;\n    cast 0u64 0u32 into r11 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r11 into r12;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r11 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r11 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r11 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r11 into r16;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r17;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r21;\n    add r6.microcredits r7.microcredits into r22;\n    add r22 r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r17 r18 into r26;\n    add r26 r19 into r27;\n    add r27 r20 into r28;\n    add r28 r21 into r29;\n    add r12.microcredits r13.microcredits into r30;\n    add r30 r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    get balances[1u8] into r34;\n    add r25 r29 into r35;\n    add r35 r33 into r36;\n    sub r36 r34 into r37;\n    get balances[0u8] into r38;\n    get owed_commission[0u8] into r39;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r40;\n    cast r39 into r41 as u128;\n    add r40.supply r41 into r42;\n    cast r4 into r43 as u128;\n    sub r42 r43 into r44;\n    gt r37 r38 into r45;\n    cast r37 into r46 as i64;\n    cast r38 into r47 as i64;\n    sub r46 r47 into r48;\n    ternary r45 r48 0i64 into r49;\n    cast r49 into r50 as u128;\n    mul r50 1000u128 into r51;\n    div r51 10_000u128 into r52;\n    cast r52 into r53 as u64;\n    cast r49 into r54 as u64;\n    sub r54 r53 into r55;\n    add r38 r55 into r56;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r57;\n    get balances[2u8] into r58;\n    get protocol_state[0u8] into r59;\n    cast r57 into r60 as i64;\n    cast r3 into r61 as i64;\n    cast r58 into r62 as i64;\n    is.neq r59 2u8 into r63;\n    sub r60 r61 into r64;\n    sub r64 r62 into r65;\n    cast r56 into r66 as i64;\n    sub r60 r66 into r67;\n    sub r67 r61 into r68;\n    sub r68 r62 into r69;\n    ternary r63 r65 r69 into r70;\n    cast r56 into r71 as u128;\n    cast r70 into r72 as u128;\n    cast r53 into r73 as u128;\n    add r71 r72 into r74;\n    add r74 r73 into r75;\n    mul r44 r75 into r76;\n    div r76 r74 into r77;\n    sub r77 r44 into r78;\n    cast r78 into r79 as u64;\n    add r39 r79 into r80;\n    set r80 into owed_commission[0u8];\n    cast r79 into r81 as u128;\n    add r44 r81 into r82;\n    add r56 r53 into r83;\n    set r83 into balances[0u8];\n    cast r83 into r84 as u128;\n    cast r70 into r85 as u128;\n    cast r3 into r86 as u128;\n    add r84 r85 into r87;\n    add r87 r86 into r88;\n    mul r82 r88 into r89;\n    div r89 r87 into r90;\n    sub r90 r82 into r91;\n    cast r91 into r92 as u64;\n    gte r92 r4 into r93;\n    assert.eq r93 true;\n\n\n\n\n\n\nfunction distribute_deposits:\n    input r0 as [u64; 5u32].public;\n    gte r0[0u32] 1_000_000u64 into r1;\n    assert.eq r1 true;\n    gte r0[1u32] 1_000_000u64 into r2;\n    assert.eq r2 true;\n    gte r0[2u32] 1_000_000u64 into r3;\n    assert.eq r3 true;\n    gte r0[3u32] 1_000_000u64 into r4;\n    assert.eq r4 true;\n    gte r0[4u32] 1_000_000u64 into r5;\n    assert.eq r5 true;\n    call credits.aleo/transfer_public pondo_delegator1.aleo r0[0u32] into r6;\n    call credits.aleo/transfer_public pondo_delegator2.aleo r0[1u32] into r7;\n    call credits.aleo/transfer_public pondo_delegator3.aleo r0[2u32] into r8;\n    call credits.aleo/transfer_public pondo_delegator4.aleo r0[3u32] into r9;\n    call credits.aleo/transfer_public pondo_delegator5.aleo r0[4u32] into r10;\n    async distribute_deposits r6 r7 r8 r9 r10 r0 into r11;\n    output r11 as pondo_core_protocol.aleo/distribute_deposits.future;\n\nfinalize distribute_deposits:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    input r5 as [u64; 5u32].public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    get protocol_state[0u8] into r6;\n    is.eq r6 0u8 into r7;\n    assert.eq r7 true;\n    get balances[0u8] into r8;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r9;\n    get balances[2u8] into r10;\n    sub r9 r10 into r11;\n    cast r8 into r12 as u128;\n    mul r12 250u128 into r13;\n    div r13 10_000u128 into r14;\n    cast 250_000_000_000u64 into r15 as u128;\n    gt r14 r15 into r16;\n    cast r14 into r17 as u64;\n    ternary r16 250_000_000_000u64 r17 into r18;\n    gte r11 r18 into r19;\n    assert.eq r19 true;\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r20 as [u128; 10u32];\n    get.or_use pondo_oracle.aleo/delegator_allocation[0u8] r20 into r21;\n    add r5[0u32] r5[1u32] into r22;\n    add r22 r5[2u32] into r23;\n    add r23 r5[3u32] into r24;\n    add r24 r5[4u32] into r25;\n    cast r25 into r26 as u128;\n    cast r5[0u32] into r27 as u128;\n    mul r27 10_000u128 into r28;\n    div r28 r26 into r29;\n    cast r5[1u32] into r30 as u128;\n    mul r30 10_000u128 into r31;\n    div r31 r26 into r32;\n    cast r5[2u32] into r33 as u128;\n    mul r33 10_000u128 into r34;\n    div r34 r26 into r35;\n    cast r5[3u32] into r36 as u128;\n    mul r36 10_000u128 into r37;\n    div r37 r26 into r38;\n    cast r5[4u32] into r39 as u128;\n    mul r39 10_000u128 into r40;\n    div r40 r26 into r41;\n    sub r21[0u32] r29 into r42;\n    lte r42 2u128 into r43;\n    assert.eq r43 true;\n    sub r21[1u32] r32 into r44;\n    lte r44 2u128 into r45;\n    assert.eq r45 true;\n    sub r21[2u32] r35 into r46;\n    lte r46 2u128 into r47;\n    assert.eq r47 true;\n    sub r21[3u32] r38 into r48;\n    lte r48 2u128 into r49;\n    assert.eq r49 true;\n    sub r21[4u32] r41 into r50;\n    lte r50 2u128 into r51;\n    assert.eq r51 true;\n\n\n\n\n\n\nfunction instant_withdraw_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    call pondo_staked_aleo_token.aleo/burn_public r0 self.caller into r2;\n    call credits.aleo/transfer_public self.caller r1 into r3;\n    async instant_withdraw_public r2 r3 r0 r1 self.caller into r4;\n    output r4 as pondo_core_protocol.aleo/instant_withdraw_public.future;\n\nfinalize instant_withdraw_public:\n    input r0 as pondo_staked_aleo_token.aleo/burn_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    input r4 as address.public;\n    await r0;\n    await r1;\n    get protocol_state[0u8] into r5;\n    is.neq r5 2u8 into r6;\n    assert.eq r6 true;\n    contains withdrawals[r4] into r7;\n    not r7 into r8;\n    assert.eq r8 true;\n    cast pondo_core_protocol.aleo 0u64 into r9 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r9 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r9 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r9 into r12;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r9 into r13;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r9 into r14;\n    cast 0u64 0u32 into r15 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r15 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r15 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r15 into r18;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r15 into r19;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r15 into r20;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r23;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r24;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r25;\n    add r10.microcredits r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r27 r13.microcredits into r28;\n    add r28 r14.microcredits into r29;\n    add r21 r22 into r30;\n    add r30 r23 into r31;\n    add r31 r24 into r32;\n    add r32 r25 into r33;\n    add r16.microcredits r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    add r35 r19.microcredits into r36;\n    add r36 r20.microcredits into r37;\n    get balances[1u8] into r38;\n    add r29 r33 into r39;\n    add r39 r37 into r40;\n    sub r40 r38 into r41;\n    get balances[0u8] into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r2 into r47 as u128;\n    add r46 r47 into r48;\n    gt r41 r42 into r49;\n    cast r41 into r50 as i64;\n    cast r42 into r51 as i64;\n    sub r50 r51 into r52;\n    ternary r49 r52 0i64 into r53;\n    cast r53 into r54 as u128;\n    mul r54 1000u128 into r55;\n    div r55 10_000u128 into r56;\n    cast r56 into r57 as u64;\n    cast r53 into r58 as u64;\n    sub r58 r57 into r59;\n    add r42 r59 into r60;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r61;\n    get balances[2u8] into r62;\n    gte r61 r62 into r63;\n    assert.eq r63 true;\n    sub r61 r62 into r64;\n    add r64 r3 into r65;\n    cast r60 into r66 as u128;\n    cast r65 into r67 as u128;\n    cast r57 into r68 as u128;\n    add r66 r67 into r69;\n    add r69 r68 into r70;\n    mul r48 r70 into r71;\n    div r71 r69 into r72;\n    sub r72 r48 into r73;\n    cast r73 into r74 as u64;\n    add r43 r74 into r75;\n    cast r74 into r76 as u128;\n    add r48 r76 into r77;\n    add r60 r57 into r78;\n    set r78 into balances[0u8];\n    cast r78 into r79 as u128;\n    cast r65 into r80 as u128;\n    add r79 r80 into r81;\n    cast r2 into r82 as u128;\n    mul r82 025u128 into r83;\n    div r83 10_000u128 into r84;\n    cast r84 into r85 as u64;\n    sub r2 r85 into r86;\n    cast r86 into r87 as u128;\n    cast r81 into r88 as u128;\n    mul r87 r88 into r89;\n    cast r77 into r90 as u128;\n    div r89 r90 into r91;\n    cast r91 into r92 as u64;\n    lte r3 r92 into r93;\n    assert.eq r93 true;\n    add r75 r85 into r94;\n    set r94 into owed_commission[0u8];\n\n\n\n\n\n\nfunction withdraw_public:\n    input r0 as u64.public;\n    call pondo_staked_aleo_token.aleo/burn_public r0 self.caller into r1;\n    async withdraw_public r1 r0 self.caller into r2;\n    output r2 as pondo_core_protocol.aleo/withdraw_public.future;\n\nfinalize withdraw_public:\n    input r0 as pondo_staked_aleo_token.aleo/burn_public.future;\n    input r1 as u64.public;\n    input r2 as address.public;\n    await r0;\n    get protocol_state[0u8] into r3;\n    is.neq r3 2u8 into r4;\n    assert.eq r4 true;\n    contains withdrawals[r2] into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast pondo_core_protocol.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r23;\n    add r8.microcredits r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r25 r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r19 r20 into r28;\n    add r28 r21 into r29;\n    add r29 r22 into r30;\n    add r30 r23 into r31;\n    add r14.microcredits r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    add r33 r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    get balances[1u8] into r36;\n    cast r27 into r37 as i64;\n    cast r31 into r38 as i64;\n    add r37 r38 into r39;\n    cast r35 into r40 as i64;\n    add r39 r40 into r41;\n    cast r36 into r42 as i64;\n    sub r41 r42 into r43;\n    get balances[0u8] into r44;\n    get owed_commission[0u8] into r45;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r46;\n    cast r45 into r47 as u128;\n    add r46.supply r47 into r48;\n    cast r1 into r49 as u128;\n    add r48 r49 into r50;\n    cast r44 into r51 as i64;\n    gt r43 r51 into r52;\n    cast r44 into r53 as i64;\n    sub r43 r53 into r54;\n    ternary r52 r54 0i64 into r55;\n    cast r55 into r56 as u128;\n    mul r56 1000u128 into r57;\n    div r57 10_000u128 into r58;\n    cast r58 into r59 as u64;\n    cast r55 into r60 as u64;\n    sub r60 r59 into r61;\n    add r44 r61 into r62;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r63;\n    get balances[2u8] into r64;\n    sub r63 r64 into r65;\n    cast r62 into r66 as u128;\n    cast r65 into r67 as u128;\n    cast r59 into r68 as u128;\n    add r66 r67 into r69;\n    add r69 r68 into r70;\n    mul r50 r70 into r71;\n    div r71 r69 into r72;\n    sub r72 r50 into r73;\n    cast r73 into r74 as u64;\n    add r45 r74 into r75;\n    set r75 into owed_commission[0u8];\n    cast r74 into r76 as u128;\n    add r50 r76 into r77;\n    add r62 r59 into r78;\n    cast r78 into r79 as u128;\n    cast r65 into r80 as u128;\n    add r79 r80 into r81;\n    cast r1 into r82 as u128;\n    cast r81 into r83 as u128;\n    mul r82 r83 into r84;\n    cast r77 into r85 as u128;\n    div r84 r85 into r86;\n    cast r86 into r87 as u64;\n    add r36 r87 into r88;\n    set r88 into balances[1u8];\n    sub r78 r87 into r89;\n    set r89 into balances[0u8];\n    add block.height 43_200u32 into r90;\n    div r90 120_960u32 into r91;\n    add r91 1u32 into r92;\n    mul r92 120_960u32 into r93;\n    add r93 17_280u32 into r94;\n    add r94 1u32 into r95;\n    cast r87 r95 into r96 as withdrawal_state;\n    set r96 into withdrawals[r2];\n\n\n\n\nfunction claim_withdrawal_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public r0 r1 into r2;\n    async claim_withdrawal_public r2 r0 r1 into r3;\n    output r3 as pondo_core_protocol.aleo/claim_withdrawal_public.future;\n\nfinalize claim_withdrawal_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    get protocol_state[0u8] into r3;\n    is.neq r3 2u8 into r4;\n    assert.eq r4 true;\n    get withdrawals[r1] into r5;\n    lt r5.claim_block block.height into r6;\n    assert.eq r6 true;\n    is.eq r5.microcredits r2 into r7;\n    branch.eq r7 false to end_then_0_0;\n    remove withdrawals[r1];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    sub r5.microcredits r2 into r8;\n    cast r8 r5.claim_block into r9 as withdrawal_state;\n    set r9 into withdrawals[r1];\n    position end_otherwise_0_1;\n    get balances[2u8] into r10;\n    sub r10 r2 into r11;\n    set r11 into balances[2u8];\n\n\n\n\nfunction rebalance_retrieve_credits:\n    input r0 as [u64; 5u32].public;\n    input r1 as u64.public;\n    call pondo_delegator1.aleo/transfer_to_core_protocol r0[0u32] into r2;\n    call pondo_delegator2.aleo/transfer_to_core_protocol r0[1u32] into r3;\n    call pondo_delegator3.aleo/transfer_to_core_protocol r0[2u32] into r4;\n    call pondo_delegator4.aleo/transfer_to_core_protocol r0[3u32] into r5;\n    call pondo_delegator5.aleo/transfer_to_core_protocol r0[4u32] into r6;\n    call pondo_staked_aleo_token.aleo/mint_public r1 pondo_token.aleo into r7;\n    async rebalance_retrieve_credits r2 r3 r4 r5 r6 r7 r0 r1 into r8;\n    output r8 as pondo_core_protocol.aleo/rebalance_retrieve_credits.future;\n\nfinalize rebalance_retrieve_credits:\n    input r0 as pondo_delegator1.aleo/transfer_to_core_protocol.future;\n    input r1 as pondo_delegator2.aleo/transfer_to_core_protocol.future;\n    input r2 as pondo_delegator3.aleo/transfer_to_core_protocol.future;\n    input r3 as pondo_delegator4.aleo/transfer_to_core_protocol.future;\n    input r4 as pondo_delegator5.aleo/transfer_to_core_protocol.future;\n    input r5 as pondo_staked_aleo_token.aleo/mint_public.future;\n    input r6 as [u64; 5u32].public;\n    input r7 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    get balances[1u8] into r8;\n    add r6[0u32] r6[1u32] into r9;\n    add r9 r6[2u32] into r10;\n    add r10 r6[3u32] into r11;\n    add r11 r6[4u32] into r12;\n    sub r12 r8 into r13;\n    get balances[0u8] into r14;\n    get owed_commission[0u8] into r15;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r16;\n    cast r15 into r17 as u128;\n    add r16.supply r17 into r18;\n    cast r7 into r19 as u128;\n    sub r18 r19 into r20;\n    gt r13 r14 into r21;\n    cast r13 into r22 as i64;\n    cast r14 into r23 as i64;\n    sub r22 r23 into r24;\n    ternary r21 r24 0i64 into r25;\n    cast r25 into r26 as u128;\n    mul r26 1000u128 into r27;\n    div r27 10_000u128 into r28;\n    cast r28 into r29 as u64;\n    cast r25 into r30 as u64;\n    sub r30 r29 into r31;\n    add r14 r31 into r32;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r33;\n    get balances[2u8] into r34;\n    add r34 r8 into r35;\n    set r35 into balances[2u8];\n    set 0u64 into balances[1u8];\n    sub r33 r13 into r36;\n    sub r36 r34 into r37;\n    cast r32 into r38 as u128;\n    cast r37 into r39 as u128;\n    cast r29 into r40 as u128;\n    add r38 r39 into r41;\n    add r41 r40 into r42;\n    mul r20 r42 into r43;\n    div r43 r41 into r44;\n    sub r44 r20 into r45;\n    cast r45 into r46 as u64;\n    add r15 r46 into r47;\n    sub r47 r7 into r48;\n    set r48 into owed_commission[0u8];\n    add r32 r29 into r49;\n    set r49 into balances[0u8];\n    get protocol_state[0u8] into r50;\n    is.eq r50 1u8 into r51;\n    assert.eq r51 true;\n    set 2u8 into protocol_state[0u8];\n\n\n\n\nfunction rebalance_redistribute:\n    input r0 as [validator_state; 5u32].public;\n    input r1 as [u64; 5u32].public;\n    call credits.aleo/transfer_public pondo_delegator1.aleo r1[0u32] into r2;\n    call credits.aleo/transfer_public pondo_delegator2.aleo r1[1u32] into r3;\n    call credits.aleo/transfer_public pondo_delegator3.aleo r1[2u32] into r4;\n    call credits.aleo/transfer_public pondo_delegator4.aleo r1[3u32] into r5;\n    call credits.aleo/transfer_public pondo_delegator5.aleo r1[4u32] into r6;\n    call pondo_delegator1.aleo/set_validator r0[0u32].validator r0[0u32].commission into r7;\n    call pondo_delegator2.aleo/set_validator r0[1u32].validator r0[1u32].commission into r8;\n    call pondo_delegator3.aleo/set_validator r0[2u32].validator r0[2u32].commission into r9;\n    call pondo_delegator4.aleo/set_validator r0[3u32].validator r0[3u32].commission into r10;\n    call pondo_delegator5.aleo/set_validator r0[4u32].validator r0[4u32].commission into r11;\n    async rebalance_redistribute r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r0 r1 into r12;\n    output r12 as pondo_core_protocol.aleo/rebalance_redistribute.future;\n\nfinalize rebalance_redistribute:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    input r5 as pondo_delegator1.aleo/set_validator.future;\n    input r6 as pondo_delegator2.aleo/set_validator.future;\n    input r7 as pondo_delegator3.aleo/set_validator.future;\n    input r8 as pondo_delegator4.aleo/set_validator.future;\n    input r9 as pondo_delegator5.aleo/set_validator.future;\n    input r10 as [validator_state; 5u32].public;\n    input r11 as [u64; 5u32].public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    await r9;\n    get validator_set[1u8] into r12;\n    set r12 into validator_set[0u8];\n    remove validator_set[1u8];\n    is.eq r10[0u32].validator r12[0u32].validator into r13;\n    is.eq r10[0u32].commission r12[0u32].commission into r14;\n    and r13 r14 into r15;\n    assert.eq r15 true;\n    is.eq r10[1u32].validator r12[1u32].validator into r16;\n    is.eq r10[1u32].commission r12[1u32].commission into r17;\n    and r16 r17 into r18;\n    assert.eq r18 true;\n    is.eq r10[2u32].validator r12[2u32].validator into r19;\n    is.eq r10[2u32].commission r12[2u32].commission into r20;\n    and r19 r20 into r21;\n    assert.eq r21 true;\n    is.eq r10[3u32].validator r12[3u32].validator into r22;\n    is.eq r10[3u32].commission r12[3u32].commission into r23;\n    and r22 r23 into r24;\n    assert.eq r24 true;\n    is.eq r10[4u32].validator r12[4u32].validator into r25;\n    is.eq r10[4u32].commission r12[4u32].commission into r26;\n    and r25 r26 into r27;\n    assert.eq r27 true;\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r28 as [u128; 10u32];\n    get.or_use pondo_oracle.aleo/delegator_allocation[0u8] r28 into r29;\n    add r11[0u32] r11[1u32] into r30;\n    add r30 r11[2u32] into r31;\n    add r31 r11[3u32] into r32;\n    add r32 r11[4u32] into r33;\n    cast r33 into r34 as u128;\n    cast r11[0u32] into r35 as u128;\n    mul r35 10_000u128 into r36;\n    div r36 r34 into r37;\n    cast r11[1u32] into r38 as u128;\n    mul r38 10_000u128 into r39;\n    div r39 r34 into r40;\n    cast r11[2u32] into r41 as u128;\n    mul r41 10_000u128 into r42;\n    div r42 r34 into r43;\n    cast r11[3u32] into r44 as u128;\n    mul r44 10_000u128 into r45;\n    div r45 r34 into r46;\n    cast r11[4u32] into r47 as u128;\n    mul r47 10_000u128 into r48;\n    div r48 r34 into r49;\n    sub r29[0u32] r37 into r50;\n    lte r50 2u128 into r51;\n    assert.eq r51 true;\n    sub r29[1u32] r40 into r52;\n    lte r52 2u128 into r53;\n    assert.eq r53 true;\n    sub r29[2u32] r43 into r54;\n    lte r54 2u128 into r55;\n    assert.eq r55 true;\n    sub r29[3u32] r46 into r56;\n    lte r56 2u128 into r57;\n    assert.eq r57 true;\n    sub r29[4u32] r49 into r58;\n    lte r58 2u128 into r59;\n    assert.eq r59 true;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r60;\n    get balances[2u8] into r61;\n    sub r60 r61 into r62;\n    mul r34 250u128 into r63;\n    div r63 10_000u128 into r64;\n    cast 250_000_000_000u64 into r65 as u128;\n    gt r64 r65 into r66;\n    cast r64 into r67 as u64;\n    ternary r66 250_000_000_000u64 r67 into r68;\n    gte r62 r68 into r69;\n    assert.eq r69 true;\n    add r68 250u64 into r70;\n    lte r62 r70 into r71;\n    assert.eq r71 true;\n    set r33 into balances[0u8];\n    get protocol_state[0u8] into r72;\n    is.eq r72 2u8 into r73;\n    assert.eq r73 true;\n    set 0u8 into protocol_state[0u8];\n\n\n\n\nfunction set_oracle_tvl:\n    input r0 as u64.public;\n    call pondo_oracle.aleo/set_pondo_tvl r0 into r1;\n    async set_oracle_tvl r1 r0 into r2;\n    output r2 as pondo_core_protocol.aleo/set_oracle_tvl.future;\n\nfinalize set_oracle_tvl:\n    input r0 as pondo_oracle.aleo/set_pondo_tvl.future;\n    input r1 as u64.public;\n    await r0;\n    get.or_use credits.aleo/account[pondo_delegator1.aleo] 0u64 into r2;\n    get.or_use credits.aleo/account[pondo_delegator2.aleo] 0u64 into r3;\n    get.or_use credits.aleo/account[pondo_delegator3.aleo] 0u64 into r4;\n    get.or_use credits.aleo/account[pondo_delegator4.aleo] 0u64 into r5;\n    get.or_use credits.aleo/account[pondo_delegator5.aleo] 0u64 into r6;\n    cast pondo_core_protocol.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_core_protocol.aleo] 0u64 into r19;\n    add r2 r3 into r20;\n    add r20 r4 into r21;\n    add r21 r5 into r22;\n    add r22 r6 into r23;\n    add r23 r8.microcredits into r24;\n    add r24 r9.microcredits into r25;\n    add r25 r10.microcredits into r26;\n    add r26 r11.microcredits into r27;\n    add r27 r12.microcredits into r28;\n    add r28 r19 into r29;\n    add r29 r14.microcredits into r30;\n    add r30 r15.microcredits into r31;\n    add r31 r16.microcredits into r32;\n    add r32 r17.microcredits into r33;\n    add r33 r18.microcredits into r34;\n    mul r1 98u64 into r35;\n    div r35 100u64 into r36;\n    gte r34 r36 into r37;\n    mul r1 102u64 into r38;\n    div r38 100u64 into r39;\n    lte r34 r39 into r40;\n    and r37 r40 into r41;\n    assert.eq r41 true;\n\n",
  "pondo_oracle.aleo": "import credits.aleo;\nprogram pondo_oracle.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct validator_boost:\n    epoch as u32;\n    boost_amount as u64;\n\n\nmapping delegator_to_validator:\n\tkey as address.public;\n\tvalue as address.public;\n\n\nmapping validator_data:\n\tkey as address.public;\n\tvalue as validator_datum.public;\n\n\nmapping top_validators:\n\tkey as u8.public;\n\tvalue as [address; 10u32].public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping pondo_tvl:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping validator_boosting:\n\tkey as address.public;\n\tvalue as validator_boost.public;\n\n\nmapping control_addresses:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping delegator_allocation:\n\tkey as u8.public;\n\tvalue as [u128; 10u32].public;\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as pondo_oracle.aleo/initialize.future;\n\nfinalize initialize:\n    set true into control_addresses[aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0];\n    set false into control_addresses[pondo_delegator1.aleo];\n    set false into control_addresses[pondo_delegator2.aleo];\n    set false into control_addresses[pondo_delegator3.aleo];\n    set false into control_addresses[pondo_delegator4.aleo];\n    set false into control_addresses[pondo_delegator5.aleo];\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r0 as [u128; 10u32];\n    set r0 into delegator_allocation[0u8];\n    cast  aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r1 as [address; 10u32];\n    set r1 into top_validators[0u8];\n\n\n\n\nfunction add_control_address:\n    input r0 as address.public;\n    async add_control_address r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/add_control_address.future;\n\nfinalize add_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set false into control_addresses[r0];\n\n\n\n\nfunction remove_control_address:\n    input r0 as address.public;\n    async remove_control_address r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/remove_control_address.future;\n\nfinalize remove_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    remove control_addresses[r0];\n\n\n\n\nfunction update_admin:\n    input r0 as address.public;\n    async update_admin r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/update_admin.future;\n\nfinalize update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set true into control_addresses[r0];\n    remove control_addresses[r1];\n\n\n\n\nfunction update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    async update_delegator_allocations r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/update_delegator_allocations.future;\n\nfinalize update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set r0 into delegator_allocation[0u8];\n\n\n\n\nfunction propose_delegator:\n    input r0 as address.public;\n    assert.neq self.caller self.signer;\n    async propose_delegator self.caller r0 into r1;\n    output r1 as pondo_oracle.aleo/propose_delegator.future;\n\nfinalize propose_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    contains banned_validators[r1] into r2;\n    assert.eq r2 false;\n    contains delegator_to_validator[r0] into r3;\n    assert.eq r3 false;\n    set r1 into delegator_to_validator[r0];\n\n\n\n\nfunction add_delegator:\n    input r0 as address.public;\n    async add_delegator r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/add_delegator.future;\n\nfinalize add_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    assert.eq r2 true;\n    contains delegator_to_validator[r0] into r3;\n    assert.eq r3 true;\n    get credits.aleo/withdraw[r0] into r4;\n    assert.eq r4 r0;\n    get delegator_to_validator[r0] into r5;\n    get credits.aleo/bonded[r0] into r6;\n    assert.eq r6.validator r5;\n    contains banned_validators[r5] into r7;\n    assert.eq r7 false;\n    contains validator_data[r0] into r8;\n    assert.eq r8 false;\n    get credits.aleo/committee[r5] into r9;\n    assert.eq r9.is_open true;\n    lt r9.commission 50u8 into r10;\n    assert.eq r10 true;\n    cast r0 r5 block.height r6.microcredits 0u128 r9.commission 0u128 into r11 as validator_datum;\n    set r11 into validator_data[r0];\n\n\n\n\n\n\n\n\nfunction update_data:\n    input r0 as address.public;\n    async update_data r0 into r1;\n    output r1 as pondo_oracle.aleo/update_data.future;\n\nfinalize update_data:\n    input r0 as address.public;\n    get validator_data[r0] into r1;\n    contains banned_validators[r1.validator] into r2;\n    assert.eq r2 false;\n    rem block.height 120_960u32 into r3;\n    gte r3 103_680u32 into r4;\n    assert.eq r4 true;\n    sub block.height r1.block_height into r5;\n    gt r5 103_680u32 into r6;\n    assert.eq r6 true;\n    get credits.aleo/committee[r1.validator] into r7;\n    lt r7.commission 50u8 into r8;\n    assert.eq r8 true;\n    assert.eq r7.is_open true;\n    get credits.aleo/bonded[r0] into r9;\n    div block.height 120_960u32 into r10;\n    cast r9.microcredits into r11 as u128;\n    cast r1.bonded_microcredits into r12 as u128;\n    sub r11 r12 into r13;\n    mul r13 10_000_000_000u128 into r14;\n    cast r1.bonded_microcredits into r15 as u128;\n    div r14 r15 into r16;\n    cast 120_960u32 into r17 as u128;\n    mul r16 r17 into r18;\n    cast r5 into r19 as u128;\n    div r18 r19 into r20;\n    cast 0u32 0u64 into r21 as validator_boost;\n    get.or_use validator_boosting[r1.validator] r21 into r22;\n    is.eq r22.epoch r10 into r23;\n    cast r22.boost_amount into r24 as u128;\n    ternary r23 r24 0u128 into r25;\n    get.or_use pondo_tvl[0u8] 10_000_000_000_000_000u64 into r26;\n    cast r26 into r27 as u128;\n    mul r25 10_000_000_000u128 into r28;\n    cast r27 into r29 as u128;\n    div r28 r29 into r30;\n    div r1.block_height 120_960u32 into r31;\n    add r31 1u32 into r32;\n    is.eq r32 r10 into r33;\n    ternary r33 r20 0u128 into r34;\n    cast r0 r1.validator block.height r9.microcredits r34 r7.commission r30 into r35 as validator_datum;\n    get top_validators[0u8] into r36;\n    cast aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc 0u32 0u64 0u128 0u8 0u128 into r37 as validator_datum;\n    get.or_use validator_data[r36[0u32]] r37 into r38;\n    get.or_use validator_data[r36[1u32]] r37 into r39;\n    get.or_use validator_data[r36[2u32]] r37 into r40;\n    get.or_use validator_data[r36[3u32]] r37 into r41;\n    get.or_use validator_data[r36[4u32]] r37 into r42;\n    get.or_use validator_data[r36[5u32]] r37 into r43;\n    get.or_use validator_data[r36[6u32]] r37 into r44;\n    get.or_use validator_data[r36[7u32]] r37 into r45;\n    get.or_use validator_data[r36[8u32]] r37 into r46;\n    get.or_use validator_data[r36[9u32]] r37 into r47;\n    mul r10 120_960u32 into r48;\n    get delegator_allocation[0u8] into r49;\n    lt r38.block_height r48 into r50;\n    lt r35.block_height r48 into r51;\n    is.eq r38.microcredits_yield_per_epoch 0u128 into r52;\n    is.eq r35.microcredits_yield_per_epoch 0u128 into r53;\n    mul r35.boost 10_000u128 into r54;\n    div r54 r49[0u32] into r55;\n    add r35.microcredits_yield_per_epoch r55 into r56;\n    mul r38.boost 10_000u128 into r57;\n    div r57 r49[0u32] into r58;\n    add r38.microcredits_yield_per_epoch r58 into r59;\n    is.eq r35.validator r38.validator into r60;\n    gt r56 r59 into r61;\n    lt r56 r59 into r62;\n    ternary r60 r61 r62 into r63;\n    ternary r63 r38.delegator r35.delegator into r64;\n    ternary r63 r38.validator r35.validator into r65;\n    ternary r63 r38.block_height r35.block_height into r66;\n    ternary r63 r38.bonded_microcredits r35.bonded_microcredits into r67;\n    ternary r63 r38.microcredits_yield_per_epoch r35.microcredits_yield_per_epoch into r68;\n    ternary r63 r38.commission r35.commission into r69;\n    ternary r63 r38.boost r35.boost into r70;\n    cast r64 r65 r66 r67 r68 r69 r70 into r71 as validator_datum;\n    ternary r63 r35.delegator r38.delegator into r72;\n    ternary r63 r35.validator r38.validator into r73;\n    ternary r63 r35.block_height r38.block_height into r74;\n    ternary r63 r35.bonded_microcredits r38.bonded_microcredits into r75;\n    ternary r63 r35.microcredits_yield_per_epoch r38.microcredits_yield_per_epoch into r76;\n    ternary r63 r35.commission r38.commission into r77;\n    ternary r63 r35.boost r38.boost into r78;\n    cast r72 r73 r74 r75 r76 r77 r78 into r79 as validator_datum;\n    ternary r53 r38.delegator r71.delegator into r80;\n    ternary r53 r38.validator r71.validator into r81;\n    ternary r53 r38.block_height r71.block_height into r82;\n    ternary r53 r38.bonded_microcredits r71.bonded_microcredits into r83;\n    ternary r53 r38.microcredits_yield_per_epoch r71.microcredits_yield_per_epoch into r84;\n    ternary r53 r38.commission r71.commission into r85;\n    ternary r53 r38.boost r71.boost into r86;\n    cast r80 r81 r82 r83 r84 r85 r86 into r87 as validator_datum;\n    ternary r53 r35.delegator r79.delegator into r88;\n    ternary r53 r35.validator r79.validator into r89;\n    ternary r53 r35.block_height r79.block_height into r90;\n    ternary r53 r35.bonded_microcredits r79.bonded_microcredits into r91;\n    ternary r53 r35.microcredits_yield_per_epoch r79.microcredits_yield_per_epoch into r92;\n    ternary r53 r35.commission r79.commission into r93;\n    ternary r53 r35.boost r79.boost into r94;\n    cast r88 r89 r90 r91 r92 r93 r94 into r95 as validator_datum;\n    ternary r52 r35.delegator r87.delegator into r96;\n    ternary r52 r35.validator r87.validator into r97;\n    ternary r52 r35.block_height r87.block_height into r98;\n    ternary r52 r35.bonded_microcredits r87.bonded_microcredits into r99;\n    ternary r52 r35.microcredits_yield_per_epoch r87.microcredits_yield_per_epoch into r100;\n    ternary r52 r35.commission r87.commission into r101;\n    ternary r52 r35.boost r87.boost into r102;\n    cast r96 r97 r98 r99 r100 r101 r102 into r103 as validator_datum;\n    ternary r52 r38.delegator r95.delegator into r104;\n    ternary r52 r38.validator r95.validator into r105;\n    ternary r52 r38.block_height r95.block_height into r106;\n    ternary r52 r38.bonded_microcredits r95.bonded_microcredits into r107;\n    ternary r52 r38.microcredits_yield_per_epoch r95.microcredits_yield_per_epoch into r108;\n    ternary r52 r38.commission r95.commission into r109;\n    ternary r52 r38.boost r95.boost into r110;\n    cast r104 r105 r106 r107 r108 r109 r110 into r111 as validator_datum;\n    ternary r51 r38.delegator r103.delegator into r112;\n    ternary r51 r38.validator r103.validator into r113;\n    ternary r51 r38.block_height r103.block_height into r114;\n    ternary r51 r38.bonded_microcredits r103.bonded_microcredits into r115;\n    ternary r51 r38.microcredits_yield_per_epoch r103.microcredits_yield_per_epoch into r116;\n    ternary r51 r38.commission r103.commission into r117;\n    ternary r51 r38.boost r103.boost into r118;\n    cast r112 r113 r114 r115 r116 r117 r118 into r119 as validator_datum;\n    ternary r51 r35.delegator r111.delegator into r120;\n    ternary r51 r35.validator r111.validator into r121;\n    ternary r51 r35.block_height r111.block_height into r122;\n    ternary r51 r35.bonded_microcredits r111.bonded_microcredits into r123;\n    ternary r51 r35.microcredits_yield_per_epoch r111.microcredits_yield_per_epoch into r124;\n    ternary r51 r35.commission r111.commission into r125;\n    ternary r51 r35.boost r111.boost into r126;\n    cast r120 r121 r122 r123 r124 r125 r126 into r127 as validator_datum;\n    ternary r50 r35.delegator r119.delegator into r128;\n    ternary r50 r35.validator r119.validator into r129;\n    ternary r50 r35.block_height r119.block_height into r130;\n    ternary r50 r35.bonded_microcredits r119.bonded_microcredits into r131;\n    ternary r50 r35.microcredits_yield_per_epoch r119.microcredits_yield_per_epoch into r132;\n    ternary r50 r35.commission r119.commission into r133;\n    ternary r50 r35.boost r119.boost into r134;\n    cast r128 r129 r130 r131 r132 r133 r134 into r135 as validator_datum;\n    ternary r50 r38.delegator r127.delegator into r136;\n    ternary r50 r38.validator r127.validator into r137;\n    ternary r50 r38.block_height r127.block_height into r138;\n    ternary r50 r38.bonded_microcredits r127.bonded_microcredits into r139;\n    ternary r50 r38.microcredits_yield_per_epoch r127.microcredits_yield_per_epoch into r140;\n    ternary r50 r38.commission r127.commission into r141;\n    ternary r50 r38.boost r127.boost into r142;\n    cast r136 r137 r138 r139 r140 r141 r142 into r143 as validator_datum;\n    lt r39.block_height r48 into r144;\n    lt r143.block_height r48 into r145;\n    is.eq r39.microcredits_yield_per_epoch 0u128 into r146;\n    is.eq r143.microcredits_yield_per_epoch 0u128 into r147;\n    mul r143.boost 10_000u128 into r148;\n    div r148 r49[1u32] into r149;\n    add r143.microcredits_yield_per_epoch r149 into r150;\n    mul r39.boost 10_000u128 into r151;\n    div r151 r49[1u32] into r152;\n    add r39.microcredits_yield_per_epoch r152 into r153;\n    is.eq r143.validator r39.validator into r154;\n    gt r150 r153 into r155;\n    lt r150 r153 into r156;\n    ternary r154 r155 r156 into r157;\n    ternary r157 r39.delegator r143.delegator into r158;\n    ternary r157 r39.validator r143.validator into r159;\n    ternary r157 r39.block_height r143.block_height into r160;\n    ternary r157 r39.bonded_microcredits r143.bonded_microcredits into r161;\n    ternary r157 r39.microcredits_yield_per_epoch r143.microcredits_yield_per_epoch into r162;\n    ternary r157 r39.commission r143.commission into r163;\n    ternary r157 r39.boost r143.boost into r164;\n    cast r158 r159 r160 r161 r162 r163 r164 into r165 as validator_datum;\n    ternary r157 r143.delegator r39.delegator into r166;\n    ternary r157 r143.validator r39.validator into r167;\n    ternary r157 r143.block_height r39.block_height into r168;\n    ternary r157 r143.bonded_microcredits r39.bonded_microcredits into r169;\n    ternary r157 r143.microcredits_yield_per_epoch r39.microcredits_yield_per_epoch into r170;\n    ternary r157 r143.commission r39.commission into r171;\n    ternary r157 r143.boost r39.boost into r172;\n    cast r166 r167 r168 r169 r170 r171 r172 into r173 as validator_datum;\n    ternary r147 r39.delegator r165.delegator into r174;\n    ternary r147 r39.validator r165.validator into r175;\n    ternary r147 r39.block_height r165.block_height into r176;\n    ternary r147 r39.bonded_microcredits r165.bonded_microcredits into r177;\n    ternary r147 r39.microcredits_yield_per_epoch r165.microcredits_yield_per_epoch into r178;\n    ternary r147 r39.commission r165.commission into r179;\n    ternary r147 r39.boost r165.boost into r180;\n    cast r174 r175 r176 r177 r178 r179 r180 into r181 as validator_datum;\n    ternary r147 r143.delegator r173.delegator into r182;\n    ternary r147 r143.validator r173.validator into r183;\n    ternary r147 r143.block_height r173.block_height into r184;\n    ternary r147 r143.bonded_microcredits r173.bonded_microcredits into r185;\n    ternary r147 r143.microcredits_yield_per_epoch r173.microcredits_yield_per_epoch into r186;\n    ternary r147 r143.commission r173.commission into r187;\n    ternary r147 r143.boost r173.boost into r188;\n    cast r182 r183 r184 r185 r186 r187 r188 into r189 as validator_datum;\n    ternary r146 r143.delegator r181.delegator into r190;\n    ternary r146 r143.validator r181.validator into r191;\n    ternary r146 r143.block_height r181.block_height into r192;\n    ternary r146 r143.bonded_microcredits r181.bonded_microcredits into r193;\n    ternary r146 r143.microcredits_yield_per_epoch r181.microcredits_yield_per_epoch into r194;\n    ternary r146 r143.commission r181.commission into r195;\n    ternary r146 r143.boost r181.boost into r196;\n    cast r190 r191 r192 r193 r194 r195 r196 into r197 as validator_datum;\n    ternary r146 r39.delegator r189.delegator into r198;\n    ternary r146 r39.validator r189.validator into r199;\n    ternary r146 r39.block_height r189.block_height into r200;\n    ternary r146 r39.bonded_microcredits r189.bonded_microcredits into r201;\n    ternary r146 r39.microcredits_yield_per_epoch r189.microcredits_yield_per_epoch into r202;\n    ternary r146 r39.commission r189.commission into r203;\n    ternary r146 r39.boost r189.boost into r204;\n    cast r198 r199 r200 r201 r202 r203 r204 into r205 as validator_datum;\n    ternary r145 r39.delegator r197.delegator into r206;\n    ternary r145 r39.validator r197.validator into r207;\n    ternary r145 r39.block_height r197.block_height into r208;\n    ternary r145 r39.bonded_microcredits r197.bonded_microcredits into r209;\n    ternary r145 r39.microcredits_yield_per_epoch r197.microcredits_yield_per_epoch into r210;\n    ternary r145 r39.commission r197.commission into r211;\n    ternary r145 r39.boost r197.boost into r212;\n    cast r206 r207 r208 r209 r210 r211 r212 into r213 as validator_datum;\n    ternary r145 r143.delegator r205.delegator into r214;\n    ternary r145 r143.validator r205.validator into r215;\n    ternary r145 r143.block_height r205.block_height into r216;\n    ternary r145 r143.bonded_microcredits r205.bonded_microcredits into r217;\n    ternary r145 r143.microcredits_yield_per_epoch r205.microcredits_yield_per_epoch into r218;\n    ternary r145 r143.commission r205.commission into r219;\n    ternary r145 r143.boost r205.boost into r220;\n    cast r214 r215 r216 r217 r218 r219 r220 into r221 as validator_datum;\n    ternary r144 r143.delegator r213.delegator into r222;\n    ternary r144 r143.validator r213.validator into r223;\n    ternary r144 r143.block_height r213.block_height into r224;\n    ternary r144 r143.bonded_microcredits r213.bonded_microcredits into r225;\n    ternary r144 r143.microcredits_yield_per_epoch r213.microcredits_yield_per_epoch into r226;\n    ternary r144 r143.commission r213.commission into r227;\n    ternary r144 r143.boost r213.boost into r228;\n    cast r222 r223 r224 r225 r226 r227 r228 into r229 as validator_datum;\n    ternary r144 r39.delegator r221.delegator into r230;\n    ternary r144 r39.validator r221.validator into r231;\n    ternary r144 r39.block_height r221.block_height into r232;\n    ternary r144 r39.bonded_microcredits r221.bonded_microcredits into r233;\n    ternary r144 r39.microcredits_yield_per_epoch r221.microcredits_yield_per_epoch into r234;\n    ternary r144 r39.commission r221.commission into r235;\n    ternary r144 r39.boost r221.boost into r236;\n    cast r230 r231 r232 r233 r234 r235 r236 into r237 as validator_datum;\n    lt r40.block_height r48 into r238;\n    lt r237.block_height r48 into r239;\n    is.eq r40.microcredits_yield_per_epoch 0u128 into r240;\n    is.eq r237.microcredits_yield_per_epoch 0u128 into r241;\n    mul r237.boost 10_000u128 into r242;\n    div r242 r49[2u32] into r243;\n    add r237.microcredits_yield_per_epoch r243 into r244;\n    mul r40.boost 10_000u128 into r245;\n    div r245 r49[2u32] into r246;\n    add r40.microcredits_yield_per_epoch r246 into r247;\n    is.eq r237.validator r40.validator into r248;\n    gt r244 r247 into r249;\n    lt r244 r247 into r250;\n    ternary r248 r249 r250 into r251;\n    ternary r251 r40.delegator r237.delegator into r252;\n    ternary r251 r40.validator r237.validator into r253;\n    ternary r251 r40.block_height r237.block_height into r254;\n    ternary r251 r40.bonded_microcredits r237.bonded_microcredits into r255;\n    ternary r251 r40.microcredits_yield_per_epoch r237.microcredits_yield_per_epoch into r256;\n    ternary r251 r40.commission r237.commission into r257;\n    ternary r251 r40.boost r237.boost into r258;\n    cast r252 r253 r254 r255 r256 r257 r258 into r259 as validator_datum;\n    ternary r251 r237.delegator r40.delegator into r260;\n    ternary r251 r237.validator r40.validator into r261;\n    ternary r251 r237.block_height r40.block_height into r262;\n    ternary r251 r237.bonded_microcredits r40.bonded_microcredits into r263;\n    ternary r251 r237.microcredits_yield_per_epoch r40.microcredits_yield_per_epoch into r264;\n    ternary r251 r237.commission r40.commission into r265;\n    ternary r251 r237.boost r40.boost into r266;\n    cast r260 r261 r262 r263 r264 r265 r266 into r267 as validator_datum;\n    ternary r241 r40.delegator r259.delegator into r268;\n    ternary r241 r40.validator r259.validator into r269;\n    ternary r241 r40.block_height r259.block_height into r270;\n    ternary r241 r40.bonded_microcredits r259.bonded_microcredits into r271;\n    ternary r241 r40.microcredits_yield_per_epoch r259.microcredits_yield_per_epoch into r272;\n    ternary r241 r40.commission r259.commission into r273;\n    ternary r241 r40.boost r259.boost into r274;\n    cast r268 r269 r270 r271 r272 r273 r274 into r275 as validator_datum;\n    ternary r241 r237.delegator r267.delegator into r276;\n    ternary r241 r237.validator r267.validator into r277;\n    ternary r241 r237.block_height r267.block_height into r278;\n    ternary r241 r237.bonded_microcredits r267.bonded_microcredits into r279;\n    ternary r241 r237.microcredits_yield_per_epoch r267.microcredits_yield_per_epoch into r280;\n    ternary r241 r237.commission r267.commission into r281;\n    ternary r241 r237.boost r267.boost into r282;\n    cast r276 r277 r278 r279 r280 r281 r282 into r283 as validator_datum;\n    ternary r240 r237.delegator r275.delegator into r284;\n    ternary r240 r237.validator r275.validator into r285;\n    ternary r240 r237.block_height r275.block_height into r286;\n    ternary r240 r237.bonded_microcredits r275.bonded_microcredits into r287;\n    ternary r240 r237.microcredits_yield_per_epoch r275.microcredits_yield_per_epoch into r288;\n    ternary r240 r237.commission r275.commission into r289;\n    ternary r240 r237.boost r275.boost into r290;\n    cast r284 r285 r286 r287 r288 r289 r290 into r291 as validator_datum;\n    ternary r240 r40.delegator r283.delegator into r292;\n    ternary r240 r40.validator r283.validator into r293;\n    ternary r240 r40.block_height r283.block_height into r294;\n    ternary r240 r40.bonded_microcredits r283.bonded_microcredits into r295;\n    ternary r240 r40.microcredits_yield_per_epoch r283.microcredits_yield_per_epoch into r296;\n    ternary r240 r40.commission r283.commission into r297;\n    ternary r240 r40.boost r283.boost into r298;\n    cast r292 r293 r294 r295 r296 r297 r298 into r299 as validator_datum;\n    ternary r239 r40.delegator r291.delegator into r300;\n    ternary r239 r40.validator r291.validator into r301;\n    ternary r239 r40.block_height r291.block_height into r302;\n    ternary r239 r40.bonded_microcredits r291.bonded_microcredits into r303;\n    ternary r239 r40.microcredits_yield_per_epoch r291.microcredits_yield_per_epoch into r304;\n    ternary r239 r40.commission r291.commission into r305;\n    ternary r239 r40.boost r291.boost into r306;\n    cast r300 r301 r302 r303 r304 r305 r306 into r307 as validator_datum;\n    ternary r239 r237.delegator r299.delegator into r308;\n    ternary r239 r237.validator r299.validator into r309;\n    ternary r239 r237.block_height r299.block_height into r310;\n    ternary r239 r237.bonded_microcredits r299.bonded_microcredits into r311;\n    ternary r239 r237.microcredits_yield_per_epoch r299.microcredits_yield_per_epoch into r312;\n    ternary r239 r237.commission r299.commission into r313;\n    ternary r239 r237.boost r299.boost into r314;\n    cast r308 r309 r310 r311 r312 r313 r314 into r315 as validator_datum;\n    ternary r238 r237.delegator r307.delegator into r316;\n    ternary r238 r237.validator r307.validator into r317;\n    ternary r238 r237.block_height r307.block_height into r318;\n    ternary r238 r237.bonded_microcredits r307.bonded_microcredits into r319;\n    ternary r238 r237.microcredits_yield_per_epoch r307.microcredits_yield_per_epoch into r320;\n    ternary r238 r237.commission r307.commission into r321;\n    ternary r238 r237.boost r307.boost into r322;\n    cast r316 r317 r318 r319 r320 r321 r322 into r323 as validator_datum;\n    ternary r238 r40.delegator r315.delegator into r324;\n    ternary r238 r40.validator r315.validator into r325;\n    ternary r238 r40.block_height r315.block_height into r326;\n    ternary r238 r40.bonded_microcredits r315.bonded_microcredits into r327;\n    ternary r238 r40.microcredits_yield_per_epoch r315.microcredits_yield_per_epoch into r328;\n    ternary r238 r40.commission r315.commission into r329;\n    ternary r238 r40.boost r315.boost into r330;\n    cast r324 r325 r326 r327 r328 r329 r330 into r331 as validator_datum;\n    lt r41.block_height r48 into r332;\n    lt r331.block_height r48 into r333;\n    is.eq r41.microcredits_yield_per_epoch 0u128 into r334;\n    is.eq r331.microcredits_yield_per_epoch 0u128 into r335;\n    mul r331.boost 10_000u128 into r336;\n    div r336 r49[3u32] into r337;\n    add r331.microcredits_yield_per_epoch r337 into r338;\n    mul r41.boost 10_000u128 into r339;\n    div r339 r49[3u32] into r340;\n    add r41.microcredits_yield_per_epoch r340 into r341;\n    is.eq r331.validator r41.validator into r342;\n    gt r338 r341 into r343;\n    lt r338 r341 into r344;\n    ternary r342 r343 r344 into r345;\n    ternary r345 r41.delegator r331.delegator into r346;\n    ternary r345 r41.validator r331.validator into r347;\n    ternary r345 r41.block_height r331.block_height into r348;\n    ternary r345 r41.bonded_microcredits r331.bonded_microcredits into r349;\n    ternary r345 r41.microcredits_yield_per_epoch r331.microcredits_yield_per_epoch into r350;\n    ternary r345 r41.commission r331.commission into r351;\n    ternary r345 r41.boost r331.boost into r352;\n    cast r346 r347 r348 r349 r350 r351 r352 into r353 as validator_datum;\n    ternary r345 r331.delegator r41.delegator into r354;\n    ternary r345 r331.validator r41.validator into r355;\n    ternary r345 r331.block_height r41.block_height into r356;\n    ternary r345 r331.bonded_microcredits r41.bonded_microcredits into r357;\n    ternary r345 r331.microcredits_yield_per_epoch r41.microcredits_yield_per_epoch into r358;\n    ternary r345 r331.commission r41.commission into r359;\n    ternary r345 r331.boost r41.boost into r360;\n    cast r354 r355 r356 r357 r358 r359 r360 into r361 as validator_datum;\n    ternary r335 r41.delegator r353.delegator into r362;\n    ternary r335 r41.validator r353.validator into r363;\n    ternary r335 r41.block_height r353.block_height into r364;\n    ternary r335 r41.bonded_microcredits r353.bonded_microcredits into r365;\n    ternary r335 r41.microcredits_yield_per_epoch r353.microcredits_yield_per_epoch into r366;\n    ternary r335 r41.commission r353.commission into r367;\n    ternary r335 r41.boost r353.boost into r368;\n    cast r362 r363 r364 r365 r366 r367 r368 into r369 as validator_datum;\n    ternary r335 r331.delegator r361.delegator into r370;\n    ternary r335 r331.validator r361.validator into r371;\n    ternary r335 r331.block_height r361.block_height into r372;\n    ternary r335 r331.bonded_microcredits r361.bonded_microcredits into r373;\n    ternary r335 r331.microcredits_yield_per_epoch r361.microcredits_yield_per_epoch into r374;\n    ternary r335 r331.commission r361.commission into r375;\n    ternary r335 r331.boost r361.boost into r376;\n    cast r370 r371 r372 r373 r374 r375 r376 into r377 as validator_datum;\n    ternary r334 r331.delegator r369.delegator into r378;\n    ternary r334 r331.validator r369.validator into r379;\n    ternary r334 r331.block_height r369.block_height into r380;\n    ternary r334 r331.bonded_microcredits r369.bonded_microcredits into r381;\n    ternary r334 r331.microcredits_yield_per_epoch r369.microcredits_yield_per_epoch into r382;\n    ternary r334 r331.commission r369.commission into r383;\n    ternary r334 r331.boost r369.boost into r384;\n    cast r378 r379 r380 r381 r382 r383 r384 into r385 as validator_datum;\n    ternary r334 r41.delegator r377.delegator into r386;\n    ternary r334 r41.validator r377.validator into r387;\n    ternary r334 r41.block_height r377.block_height into r388;\n    ternary r334 r41.bonded_microcredits r377.bonded_microcredits into r389;\n    ternary r334 r41.microcredits_yield_per_epoch r377.microcredits_yield_per_epoch into r390;\n    ternary r334 r41.commission r377.commission into r391;\n    ternary r334 r41.boost r377.boost into r392;\n    cast r386 r387 r388 r389 r390 r391 r392 into r393 as validator_datum;\n    ternary r333 r41.delegator r385.delegator into r394;\n    ternary r333 r41.validator r385.validator into r395;\n    ternary r333 r41.block_height r385.block_height into r396;\n    ternary r333 r41.bonded_microcredits r385.bonded_microcredits into r397;\n    ternary r333 r41.microcredits_yield_per_epoch r385.microcredits_yield_per_epoch into r398;\n    ternary r333 r41.commission r385.commission into r399;\n    ternary r333 r41.boost r385.boost into r400;\n    cast r394 r395 r396 r397 r398 r399 r400 into r401 as validator_datum;\n    ternary r333 r331.delegator r393.delegator into r402;\n    ternary r333 r331.validator r393.validator into r403;\n    ternary r333 r331.block_height r393.block_height into r404;\n    ternary r333 r331.bonded_microcredits r393.bonded_microcredits into r405;\n    ternary r333 r331.microcredits_yield_per_epoch r393.microcredits_yield_per_epoch into r406;\n    ternary r333 r331.commission r393.commission into r407;\n    ternary r333 r331.boost r393.boost into r408;\n    cast r402 r403 r404 r405 r406 r407 r408 into r409 as validator_datum;\n    ternary r332 r331.delegator r401.delegator into r410;\n    ternary r332 r331.validator r401.validator into r411;\n    ternary r332 r331.block_height r401.block_height into r412;\n    ternary r332 r331.bonded_microcredits r401.bonded_microcredits into r413;\n    ternary r332 r331.microcredits_yield_per_epoch r401.microcredits_yield_per_epoch into r414;\n    ternary r332 r331.commission r401.commission into r415;\n    ternary r332 r331.boost r401.boost into r416;\n    cast r410 r411 r412 r413 r414 r415 r416 into r417 as validator_datum;\n    ternary r332 r41.delegator r409.delegator into r418;\n    ternary r332 r41.validator r409.validator into r419;\n    ternary r332 r41.block_height r409.block_height into r420;\n    ternary r332 r41.bonded_microcredits r409.bonded_microcredits into r421;\n    ternary r332 r41.microcredits_yield_per_epoch r409.microcredits_yield_per_epoch into r422;\n    ternary r332 r41.commission r409.commission into r423;\n    ternary r332 r41.boost r409.boost into r424;\n    cast r418 r419 r420 r421 r422 r423 r424 into r425 as validator_datum;\n    lt r42.block_height r48 into r426;\n    lt r425.block_height r48 into r427;\n    is.eq r42.microcredits_yield_per_epoch 0u128 into r428;\n    is.eq r425.microcredits_yield_per_epoch 0u128 into r429;\n    mul r425.boost 10_000u128 into r430;\n    div r430 r49[4u32] into r431;\n    add r425.microcredits_yield_per_epoch r431 into r432;\n    mul r42.boost 10_000u128 into r433;\n    div r433 r49[4u32] into r434;\n    add r42.microcredits_yield_per_epoch r434 into r435;\n    is.eq r425.validator r42.validator into r436;\n    gt r432 r435 into r437;\n    lt r432 r435 into r438;\n    ternary r436 r437 r438 into r439;\n    ternary r439 r42.delegator r425.delegator into r440;\n    ternary r439 r42.validator r425.validator into r441;\n    ternary r439 r42.block_height r425.block_height into r442;\n    ternary r439 r42.bonded_microcredits r425.bonded_microcredits into r443;\n    ternary r439 r42.microcredits_yield_per_epoch r425.microcredits_yield_per_epoch into r444;\n    ternary r439 r42.commission r425.commission into r445;\n    ternary r439 r42.boost r425.boost into r446;\n    cast r440 r441 r442 r443 r444 r445 r446 into r447 as validator_datum;\n    ternary r439 r425.delegator r42.delegator into r448;\n    ternary r439 r425.validator r42.validator into r449;\n    ternary r439 r425.block_height r42.block_height into r450;\n    ternary r439 r425.bonded_microcredits r42.bonded_microcredits into r451;\n    ternary r439 r425.microcredits_yield_per_epoch r42.microcredits_yield_per_epoch into r452;\n    ternary r439 r425.commission r42.commission into r453;\n    ternary r439 r425.boost r42.boost into r454;\n    cast r448 r449 r450 r451 r452 r453 r454 into r455 as validator_datum;\n    ternary r429 r42.delegator r447.delegator into r456;\n    ternary r429 r42.validator r447.validator into r457;\n    ternary r429 r42.block_height r447.block_height into r458;\n    ternary r429 r42.bonded_microcredits r447.bonded_microcredits into r459;\n    ternary r429 r42.microcredits_yield_per_epoch r447.microcredits_yield_per_epoch into r460;\n    ternary r429 r42.commission r447.commission into r461;\n    ternary r429 r42.boost r447.boost into r462;\n    cast r456 r457 r458 r459 r460 r461 r462 into r463 as validator_datum;\n    ternary r429 r425.delegator r455.delegator into r464;\n    ternary r429 r425.validator r455.validator into r465;\n    ternary r429 r425.block_height r455.block_height into r466;\n    ternary r429 r425.bonded_microcredits r455.bonded_microcredits into r467;\n    ternary r429 r425.microcredits_yield_per_epoch r455.microcredits_yield_per_epoch into r468;\n    ternary r429 r425.commission r455.commission into r469;\n    ternary r429 r425.boost r455.boost into r470;\n    cast r464 r465 r466 r467 r468 r469 r470 into r471 as validator_datum;\n    ternary r428 r425.delegator r463.delegator into r472;\n    ternary r428 r425.validator r463.validator into r473;\n    ternary r428 r425.block_height r463.block_height into r474;\n    ternary r428 r425.bonded_microcredits r463.bonded_microcredits into r475;\n    ternary r428 r425.microcredits_yield_per_epoch r463.microcredits_yield_per_epoch into r476;\n    ternary r428 r425.commission r463.commission into r477;\n    ternary r428 r425.boost r463.boost into r478;\n    cast r472 r473 r474 r475 r476 r477 r478 into r479 as validator_datum;\n    ternary r428 r42.delegator r471.delegator into r480;\n    ternary r428 r42.validator r471.validator into r481;\n    ternary r428 r42.block_height r471.block_height into r482;\n    ternary r428 r42.bonded_microcredits r471.bonded_microcredits into r483;\n    ternary r428 r42.microcredits_yield_per_epoch r471.microcredits_yield_per_epoch into r484;\n    ternary r428 r42.commission r471.commission into r485;\n    ternary r428 r42.boost r471.boost into r486;\n    cast r480 r481 r482 r483 r484 r485 r486 into r487 as validator_datum;\n    ternary r427 r42.delegator r479.delegator into r488;\n    ternary r427 r42.validator r479.validator into r489;\n    ternary r427 r42.block_height r479.block_height into r490;\n    ternary r427 r42.bonded_microcredits r479.bonded_microcredits into r491;\n    ternary r427 r42.microcredits_yield_per_epoch r479.microcredits_yield_per_epoch into r492;\n    ternary r427 r42.commission r479.commission into r493;\n    ternary r427 r42.boost r479.boost into r494;\n    cast r488 r489 r490 r491 r492 r493 r494 into r495 as validator_datum;\n    ternary r427 r425.delegator r487.delegator into r496;\n    ternary r427 r425.validator r487.validator into r497;\n    ternary r427 r425.block_height r487.block_height into r498;\n    ternary r427 r425.bonded_microcredits r487.bonded_microcredits into r499;\n    ternary r427 r425.microcredits_yield_per_epoch r487.microcredits_yield_per_epoch into r500;\n    ternary r427 r425.commission r487.commission into r501;\n    ternary r427 r425.boost r487.boost into r502;\n    cast r496 r497 r498 r499 r500 r501 r502 into r503 as validator_datum;\n    ternary r426 r425.delegator r495.delegator into r504;\n    ternary r426 r425.validator r495.validator into r505;\n    ternary r426 r425.block_height r495.block_height into r506;\n    ternary r426 r425.bonded_microcredits r495.bonded_microcredits into r507;\n    ternary r426 r425.microcredits_yield_per_epoch r495.microcredits_yield_per_epoch into r508;\n    ternary r426 r425.commission r495.commission into r509;\n    ternary r426 r425.boost r495.boost into r510;\n    cast r504 r505 r506 r507 r508 r509 r510 into r511 as validator_datum;\n    ternary r426 r42.delegator r503.delegator into r512;\n    ternary r426 r42.validator r503.validator into r513;\n    ternary r426 r42.block_height r503.block_height into r514;\n    ternary r426 r42.bonded_microcredits r503.bonded_microcredits into r515;\n    ternary r426 r42.microcredits_yield_per_epoch r503.microcredits_yield_per_epoch into r516;\n    ternary r426 r42.commission r503.commission into r517;\n    ternary r426 r42.boost r503.boost into r518;\n    cast r512 r513 r514 r515 r516 r517 r518 into r519 as validator_datum;\n    lt r43.block_height r48 into r520;\n    lt r519.block_height r48 into r521;\n    is.eq r43.microcredits_yield_per_epoch 0u128 into r522;\n    is.eq r519.microcredits_yield_per_epoch 0u128 into r523;\n    mul r519.boost 10_000u128 into r524;\n    div r524 r49[5u32] into r525;\n    add r519.microcredits_yield_per_epoch r525 into r526;\n    mul r43.boost 10_000u128 into r527;\n    div r527 r49[5u32] into r528;\n    add r43.microcredits_yield_per_epoch r528 into r529;\n    is.eq r519.validator r43.validator into r530;\n    gt r526 r529 into r531;\n    lt r526 r529 into r532;\n    ternary r530 r531 r532 into r533;\n    ternary r533 r43.delegator r519.delegator into r534;\n    ternary r533 r43.validator r519.validator into r535;\n    ternary r533 r43.block_height r519.block_height into r536;\n    ternary r533 r43.bonded_microcredits r519.bonded_microcredits into r537;\n    ternary r533 r43.microcredits_yield_per_epoch r519.microcredits_yield_per_epoch into r538;\n    ternary r533 r43.commission r519.commission into r539;\n    ternary r533 r43.boost r519.boost into r540;\n    cast r534 r535 r536 r537 r538 r539 r540 into r541 as validator_datum;\n    ternary r533 r519.delegator r43.delegator into r542;\n    ternary r533 r519.validator r43.validator into r543;\n    ternary r533 r519.block_height r43.block_height into r544;\n    ternary r533 r519.bonded_microcredits r43.bonded_microcredits into r545;\n    ternary r533 r519.microcredits_yield_per_epoch r43.microcredits_yield_per_epoch into r546;\n    ternary r533 r519.commission r43.commission into r547;\n    ternary r533 r519.boost r43.boost into r548;\n    cast r542 r543 r544 r545 r546 r547 r548 into r549 as validator_datum;\n    ternary r523 r43.delegator r541.delegator into r550;\n    ternary r523 r43.validator r541.validator into r551;\n    ternary r523 r43.block_height r541.block_height into r552;\n    ternary r523 r43.bonded_microcredits r541.bonded_microcredits into r553;\n    ternary r523 r43.microcredits_yield_per_epoch r541.microcredits_yield_per_epoch into r554;\n    ternary r523 r43.commission r541.commission into r555;\n    ternary r523 r43.boost r541.boost into r556;\n    cast r550 r551 r552 r553 r554 r555 r556 into r557 as validator_datum;\n    ternary r523 r519.delegator r549.delegator into r558;\n    ternary r523 r519.validator r549.validator into r559;\n    ternary r523 r519.block_height r549.block_height into r560;\n    ternary r523 r519.bonded_microcredits r549.bonded_microcredits into r561;\n    ternary r523 r519.microcredits_yield_per_epoch r549.microcredits_yield_per_epoch into r562;\n    ternary r523 r519.commission r549.commission into r563;\n    ternary r523 r519.boost r549.boost into r564;\n    cast r558 r559 r560 r561 r562 r563 r564 into r565 as validator_datum;\n    ternary r522 r519.delegator r557.delegator into r566;\n    ternary r522 r519.validator r557.validator into r567;\n    ternary r522 r519.block_height r557.block_height into r568;\n    ternary r522 r519.bonded_microcredits r557.bonded_microcredits into r569;\n    ternary r522 r519.microcredits_yield_per_epoch r557.microcredits_yield_per_epoch into r570;\n    ternary r522 r519.commission r557.commission into r571;\n    ternary r522 r519.boost r557.boost into r572;\n    cast r566 r567 r568 r569 r570 r571 r572 into r573 as validator_datum;\n    ternary r522 r43.delegator r565.delegator into r574;\n    ternary r522 r43.validator r565.validator into r575;\n    ternary r522 r43.block_height r565.block_height into r576;\n    ternary r522 r43.bonded_microcredits r565.bonded_microcredits into r577;\n    ternary r522 r43.microcredits_yield_per_epoch r565.microcredits_yield_per_epoch into r578;\n    ternary r522 r43.commission r565.commission into r579;\n    ternary r522 r43.boost r565.boost into r580;\n    cast r574 r575 r576 r577 r578 r579 r580 into r581 as validator_datum;\n    ternary r521 r43.delegator r573.delegator into r582;\n    ternary r521 r43.validator r573.validator into r583;\n    ternary r521 r43.block_height r573.block_height into r584;\n    ternary r521 r43.bonded_microcredits r573.bonded_microcredits into r585;\n    ternary r521 r43.microcredits_yield_per_epoch r573.microcredits_yield_per_epoch into r586;\n    ternary r521 r43.commission r573.commission into r587;\n    ternary r521 r43.boost r573.boost into r588;\n    cast r582 r583 r584 r585 r586 r587 r588 into r589 as validator_datum;\n    ternary r521 r519.delegator r581.delegator into r590;\n    ternary r521 r519.validator r581.validator into r591;\n    ternary r521 r519.block_height r581.block_height into r592;\n    ternary r521 r519.bonded_microcredits r581.bonded_microcredits into r593;\n    ternary r521 r519.microcredits_yield_per_epoch r581.microcredits_yield_per_epoch into r594;\n    ternary r521 r519.commission r581.commission into r595;\n    ternary r521 r519.boost r581.boost into r596;\n    cast r590 r591 r592 r593 r594 r595 r596 into r597 as validator_datum;\n    ternary r520 r519.delegator r589.delegator into r598;\n    ternary r520 r519.validator r589.validator into r599;\n    ternary r520 r519.block_height r589.block_height into r600;\n    ternary r520 r519.bonded_microcredits r589.bonded_microcredits into r601;\n    ternary r520 r519.microcredits_yield_per_epoch r589.microcredits_yield_per_epoch into r602;\n    ternary r520 r519.commission r589.commission into r603;\n    ternary r520 r519.boost r589.boost into r604;\n    cast r598 r599 r600 r601 r602 r603 r604 into r605 as validator_datum;\n    ternary r520 r43.delegator r597.delegator into r606;\n    ternary r520 r43.validator r597.validator into r607;\n    ternary r520 r43.block_height r597.block_height into r608;\n    ternary r520 r43.bonded_microcredits r597.bonded_microcredits into r609;\n    ternary r520 r43.microcredits_yield_per_epoch r597.microcredits_yield_per_epoch into r610;\n    ternary r520 r43.commission r597.commission into r611;\n    ternary r520 r43.boost r597.boost into r612;\n    cast r606 r607 r608 r609 r610 r611 r612 into r613 as validator_datum;\n    lt r44.block_height r48 into r614;\n    lt r613.block_height r48 into r615;\n    is.eq r44.microcredits_yield_per_epoch 0u128 into r616;\n    is.eq r613.microcredits_yield_per_epoch 0u128 into r617;\n    mul r613.boost 10_000u128 into r618;\n    div r618 r49[6u32] into r619;\n    add r613.microcredits_yield_per_epoch r619 into r620;\n    mul r44.boost 10_000u128 into r621;\n    div r621 r49[6u32] into r622;\n    add r44.microcredits_yield_per_epoch r622 into r623;\n    is.eq r613.validator r44.validator into r624;\n    gt r620 r623 into r625;\n    lt r620 r623 into r626;\n    ternary r624 r625 r626 into r627;\n    ternary r627 r44.delegator r613.delegator into r628;\n    ternary r627 r44.validator r613.validator into r629;\n    ternary r627 r44.block_height r613.block_height into r630;\n    ternary r627 r44.bonded_microcredits r613.bonded_microcredits into r631;\n    ternary r627 r44.microcredits_yield_per_epoch r613.microcredits_yield_per_epoch into r632;\n    ternary r627 r44.commission r613.commission into r633;\n    ternary r627 r44.boost r613.boost into r634;\n    cast r628 r629 r630 r631 r632 r633 r634 into r635 as validator_datum;\n    ternary r627 r613.delegator r44.delegator into r636;\n    ternary r627 r613.validator r44.validator into r637;\n    ternary r627 r613.block_height r44.block_height into r638;\n    ternary r627 r613.bonded_microcredits r44.bonded_microcredits into r639;\n    ternary r627 r613.microcredits_yield_per_epoch r44.microcredits_yield_per_epoch into r640;\n    ternary r627 r613.commission r44.commission into r641;\n    ternary r627 r613.boost r44.boost into r642;\n    cast r636 r637 r638 r639 r640 r641 r642 into r643 as validator_datum;\n    ternary r617 r44.delegator r635.delegator into r644;\n    ternary r617 r44.validator r635.validator into r645;\n    ternary r617 r44.block_height r635.block_height into r646;\n    ternary r617 r44.bonded_microcredits r635.bonded_microcredits into r647;\n    ternary r617 r44.microcredits_yield_per_epoch r635.microcredits_yield_per_epoch into r648;\n    ternary r617 r44.commission r635.commission into r649;\n    ternary r617 r44.boost r635.boost into r650;\n    cast r644 r645 r646 r647 r648 r649 r650 into r651 as validator_datum;\n    ternary r617 r613.delegator r643.delegator into r652;\n    ternary r617 r613.validator r643.validator into r653;\n    ternary r617 r613.block_height r643.block_height into r654;\n    ternary r617 r613.bonded_microcredits r643.bonded_microcredits into r655;\n    ternary r617 r613.microcredits_yield_per_epoch r643.microcredits_yield_per_epoch into r656;\n    ternary r617 r613.commission r643.commission into r657;\n    ternary r617 r613.boost r643.boost into r658;\n    cast r652 r653 r654 r655 r656 r657 r658 into r659 as validator_datum;\n    ternary r616 r613.delegator r651.delegator into r660;\n    ternary r616 r613.validator r651.validator into r661;\n    ternary r616 r613.block_height r651.block_height into r662;\n    ternary r616 r613.bonded_microcredits r651.bonded_microcredits into r663;\n    ternary r616 r613.microcredits_yield_per_epoch r651.microcredits_yield_per_epoch into r664;\n    ternary r616 r613.commission r651.commission into r665;\n    ternary r616 r613.boost r651.boost into r666;\n    cast r660 r661 r662 r663 r664 r665 r666 into r667 as validator_datum;\n    ternary r616 r44.delegator r659.delegator into r668;\n    ternary r616 r44.validator r659.validator into r669;\n    ternary r616 r44.block_height r659.block_height into r670;\n    ternary r616 r44.bonded_microcredits r659.bonded_microcredits into r671;\n    ternary r616 r44.microcredits_yield_per_epoch r659.microcredits_yield_per_epoch into r672;\n    ternary r616 r44.commission r659.commission into r673;\n    ternary r616 r44.boost r659.boost into r674;\n    cast r668 r669 r670 r671 r672 r673 r674 into r675 as validator_datum;\n    ternary r615 r44.delegator r667.delegator into r676;\n    ternary r615 r44.validator r667.validator into r677;\n    ternary r615 r44.block_height r667.block_height into r678;\n    ternary r615 r44.bonded_microcredits r667.bonded_microcredits into r679;\n    ternary r615 r44.microcredits_yield_per_epoch r667.microcredits_yield_per_epoch into r680;\n    ternary r615 r44.commission r667.commission into r681;\n    ternary r615 r44.boost r667.boost into r682;\n    cast r676 r677 r678 r679 r680 r681 r682 into r683 as validator_datum;\n    ternary r615 r613.delegator r675.delegator into r684;\n    ternary r615 r613.validator r675.validator into r685;\n    ternary r615 r613.block_height r675.block_height into r686;\n    ternary r615 r613.bonded_microcredits r675.bonded_microcredits into r687;\n    ternary r615 r613.microcredits_yield_per_epoch r675.microcredits_yield_per_epoch into r688;\n    ternary r615 r613.commission r675.commission into r689;\n    ternary r615 r613.boost r675.boost into r690;\n    cast r684 r685 r686 r687 r688 r689 r690 into r691 as validator_datum;\n    ternary r614 r613.delegator r683.delegator into r692;\n    ternary r614 r613.validator r683.validator into r693;\n    ternary r614 r613.block_height r683.block_height into r694;\n    ternary r614 r613.bonded_microcredits r683.bonded_microcredits into r695;\n    ternary r614 r613.microcredits_yield_per_epoch r683.microcredits_yield_per_epoch into r696;\n    ternary r614 r613.commission r683.commission into r697;\n    ternary r614 r613.boost r683.boost into r698;\n    cast r692 r693 r694 r695 r696 r697 r698 into r699 as validator_datum;\n    ternary r614 r44.delegator r691.delegator into r700;\n    ternary r614 r44.validator r691.validator into r701;\n    ternary r614 r44.block_height r691.block_height into r702;\n    ternary r614 r44.bonded_microcredits r691.bonded_microcredits into r703;\n    ternary r614 r44.microcredits_yield_per_epoch r691.microcredits_yield_per_epoch into r704;\n    ternary r614 r44.commission r691.commission into r705;\n    ternary r614 r44.boost r691.boost into r706;\n    cast r700 r701 r702 r703 r704 r705 r706 into r707 as validator_datum;\n    lt r45.block_height r48 into r708;\n    lt r707.block_height r48 into r709;\n    is.eq r45.microcredits_yield_per_epoch 0u128 into r710;\n    is.eq r707.microcredits_yield_per_epoch 0u128 into r711;\n    mul r707.boost 10_000u128 into r712;\n    div r712 r49[7u32] into r713;\n    add r707.microcredits_yield_per_epoch r713 into r714;\n    mul r45.boost 10_000u128 into r715;\n    div r715 r49[7u32] into r716;\n    add r45.microcredits_yield_per_epoch r716 into r717;\n    is.eq r707.validator r45.validator into r718;\n    gt r714 r717 into r719;\n    lt r714 r717 into r720;\n    ternary r718 r719 r720 into r721;\n    ternary r721 r45.delegator r707.delegator into r722;\n    ternary r721 r45.validator r707.validator into r723;\n    ternary r721 r45.block_height r707.block_height into r724;\n    ternary r721 r45.bonded_microcredits r707.bonded_microcredits into r725;\n    ternary r721 r45.microcredits_yield_per_epoch r707.microcredits_yield_per_epoch into r726;\n    ternary r721 r45.commission r707.commission into r727;\n    ternary r721 r45.boost r707.boost into r728;\n    cast r722 r723 r724 r725 r726 r727 r728 into r729 as validator_datum;\n    ternary r721 r707.delegator r45.delegator into r730;\n    ternary r721 r707.validator r45.validator into r731;\n    ternary r721 r707.block_height r45.block_height into r732;\n    ternary r721 r707.bonded_microcredits r45.bonded_microcredits into r733;\n    ternary r721 r707.microcredits_yield_per_epoch r45.microcredits_yield_per_epoch into r734;\n    ternary r721 r707.commission r45.commission into r735;\n    ternary r721 r707.boost r45.boost into r736;\n    cast r730 r731 r732 r733 r734 r735 r736 into r737 as validator_datum;\n    ternary r711 r45.delegator r729.delegator into r738;\n    ternary r711 r45.validator r729.validator into r739;\n    ternary r711 r45.block_height r729.block_height into r740;\n    ternary r711 r45.bonded_microcredits r729.bonded_microcredits into r741;\n    ternary r711 r45.microcredits_yield_per_epoch r729.microcredits_yield_per_epoch into r742;\n    ternary r711 r45.commission r729.commission into r743;\n    ternary r711 r45.boost r729.boost into r744;\n    cast r738 r739 r740 r741 r742 r743 r744 into r745 as validator_datum;\n    ternary r711 r707.delegator r737.delegator into r746;\n    ternary r711 r707.validator r737.validator into r747;\n    ternary r711 r707.block_height r737.block_height into r748;\n    ternary r711 r707.bonded_microcredits r737.bonded_microcredits into r749;\n    ternary r711 r707.microcredits_yield_per_epoch r737.microcredits_yield_per_epoch into r750;\n    ternary r711 r707.commission r737.commission into r751;\n    ternary r711 r707.boost r737.boost into r752;\n    cast r746 r747 r748 r749 r750 r751 r752 into r753 as validator_datum;\n    ternary r710 r707.delegator r745.delegator into r754;\n    ternary r710 r707.validator r745.validator into r755;\n    ternary r710 r707.block_height r745.block_height into r756;\n    ternary r710 r707.bonded_microcredits r745.bonded_microcredits into r757;\n    ternary r710 r707.microcredits_yield_per_epoch r745.microcredits_yield_per_epoch into r758;\n    ternary r710 r707.commission r745.commission into r759;\n    ternary r710 r707.boost r745.boost into r760;\n    cast r754 r755 r756 r757 r758 r759 r760 into r761 as validator_datum;\n    ternary r710 r45.delegator r753.delegator into r762;\n    ternary r710 r45.validator r753.validator into r763;\n    ternary r710 r45.block_height r753.block_height into r764;\n    ternary r710 r45.bonded_microcredits r753.bonded_microcredits into r765;\n    ternary r710 r45.microcredits_yield_per_epoch r753.microcredits_yield_per_epoch into r766;\n    ternary r710 r45.commission r753.commission into r767;\n    ternary r710 r45.boost r753.boost into r768;\n    cast r762 r763 r764 r765 r766 r767 r768 into r769 as validator_datum;\n    ternary r709 r45.delegator r761.delegator into r770;\n    ternary r709 r45.validator r761.validator into r771;\n    ternary r709 r45.block_height r761.block_height into r772;\n    ternary r709 r45.bonded_microcredits r761.bonded_microcredits into r773;\n    ternary r709 r45.microcredits_yield_per_epoch r761.microcredits_yield_per_epoch into r774;\n    ternary r709 r45.commission r761.commission into r775;\n    ternary r709 r45.boost r761.boost into r776;\n    cast r770 r771 r772 r773 r774 r775 r776 into r777 as validator_datum;\n    ternary r709 r707.delegator r769.delegator into r778;\n    ternary r709 r707.validator r769.validator into r779;\n    ternary r709 r707.block_height r769.block_height into r780;\n    ternary r709 r707.bonded_microcredits r769.bonded_microcredits into r781;\n    ternary r709 r707.microcredits_yield_per_epoch r769.microcredits_yield_per_epoch into r782;\n    ternary r709 r707.commission r769.commission into r783;\n    ternary r709 r707.boost r769.boost into r784;\n    cast r778 r779 r780 r781 r782 r783 r784 into r785 as validator_datum;\n    ternary r708 r707.delegator r777.delegator into r786;\n    ternary r708 r707.validator r777.validator into r787;\n    ternary r708 r707.block_height r777.block_height into r788;\n    ternary r708 r707.bonded_microcredits r777.bonded_microcredits into r789;\n    ternary r708 r707.microcredits_yield_per_epoch r777.microcredits_yield_per_epoch into r790;\n    ternary r708 r707.commission r777.commission into r791;\n    ternary r708 r707.boost r777.boost into r792;\n    cast r786 r787 r788 r789 r790 r791 r792 into r793 as validator_datum;\n    ternary r708 r45.delegator r785.delegator into r794;\n    ternary r708 r45.validator r785.validator into r795;\n    ternary r708 r45.block_height r785.block_height into r796;\n    ternary r708 r45.bonded_microcredits r785.bonded_microcredits into r797;\n    ternary r708 r45.microcredits_yield_per_epoch r785.microcredits_yield_per_epoch into r798;\n    ternary r708 r45.commission r785.commission into r799;\n    ternary r708 r45.boost r785.boost into r800;\n    cast r794 r795 r796 r797 r798 r799 r800 into r801 as validator_datum;\n    lt r46.block_height r48 into r802;\n    lt r801.block_height r48 into r803;\n    is.eq r46.microcredits_yield_per_epoch 0u128 into r804;\n    is.eq r801.microcredits_yield_per_epoch 0u128 into r805;\n    mul r801.boost 10_000u128 into r806;\n    div r806 r49[8u32] into r807;\n    add r801.microcredits_yield_per_epoch r807 into r808;\n    mul r46.boost 10_000u128 into r809;\n    div r809 r49[8u32] into r810;\n    add r46.microcredits_yield_per_epoch r810 into r811;\n    is.eq r801.validator r46.validator into r812;\n    gt r808 r811 into r813;\n    lt r808 r811 into r814;\n    ternary r812 r813 r814 into r815;\n    ternary r815 r46.delegator r801.delegator into r816;\n    ternary r815 r46.validator r801.validator into r817;\n    ternary r815 r46.block_height r801.block_height into r818;\n    ternary r815 r46.bonded_microcredits r801.bonded_microcredits into r819;\n    ternary r815 r46.microcredits_yield_per_epoch r801.microcredits_yield_per_epoch into r820;\n    ternary r815 r46.commission r801.commission into r821;\n    ternary r815 r46.boost r801.boost into r822;\n    cast r816 r817 r818 r819 r820 r821 r822 into r823 as validator_datum;\n    ternary r815 r801.delegator r46.delegator into r824;\n    ternary r815 r801.validator r46.validator into r825;\n    ternary r815 r801.block_height r46.block_height into r826;\n    ternary r815 r801.bonded_microcredits r46.bonded_microcredits into r827;\n    ternary r815 r801.microcredits_yield_per_epoch r46.microcredits_yield_per_epoch into r828;\n    ternary r815 r801.commission r46.commission into r829;\n    ternary r815 r801.boost r46.boost into r830;\n    cast r824 r825 r826 r827 r828 r829 r830 into r831 as validator_datum;\n    ternary r805 r46.delegator r823.delegator into r832;\n    ternary r805 r46.validator r823.validator into r833;\n    ternary r805 r46.block_height r823.block_height into r834;\n    ternary r805 r46.bonded_microcredits r823.bonded_microcredits into r835;\n    ternary r805 r46.microcredits_yield_per_epoch r823.microcredits_yield_per_epoch into r836;\n    ternary r805 r46.commission r823.commission into r837;\n    ternary r805 r46.boost r823.boost into r838;\n    cast r832 r833 r834 r835 r836 r837 r838 into r839 as validator_datum;\n    ternary r805 r801.delegator r831.delegator into r840;\n    ternary r805 r801.validator r831.validator into r841;\n    ternary r805 r801.block_height r831.block_height into r842;\n    ternary r805 r801.bonded_microcredits r831.bonded_microcredits into r843;\n    ternary r805 r801.microcredits_yield_per_epoch r831.microcredits_yield_per_epoch into r844;\n    ternary r805 r801.commission r831.commission into r845;\n    ternary r805 r801.boost r831.boost into r846;\n    cast r840 r841 r842 r843 r844 r845 r846 into r847 as validator_datum;\n    ternary r804 r801.delegator r839.delegator into r848;\n    ternary r804 r801.validator r839.validator into r849;\n    ternary r804 r801.block_height r839.block_height into r850;\n    ternary r804 r801.bonded_microcredits r839.bonded_microcredits into r851;\n    ternary r804 r801.microcredits_yield_per_epoch r839.microcredits_yield_per_epoch into r852;\n    ternary r804 r801.commission r839.commission into r853;\n    ternary r804 r801.boost r839.boost into r854;\n    cast r848 r849 r850 r851 r852 r853 r854 into r855 as validator_datum;\n    ternary r804 r46.delegator r847.delegator into r856;\n    ternary r804 r46.validator r847.validator into r857;\n    ternary r804 r46.block_height r847.block_height into r858;\n    ternary r804 r46.bonded_microcredits r847.bonded_microcredits into r859;\n    ternary r804 r46.microcredits_yield_per_epoch r847.microcredits_yield_per_epoch into r860;\n    ternary r804 r46.commission r847.commission into r861;\n    ternary r804 r46.boost r847.boost into r862;\n    cast r856 r857 r858 r859 r860 r861 r862 into r863 as validator_datum;\n    ternary r803 r46.delegator r855.delegator into r864;\n    ternary r803 r46.validator r855.validator into r865;\n    ternary r803 r46.block_height r855.block_height into r866;\n    ternary r803 r46.bonded_microcredits r855.bonded_microcredits into r867;\n    ternary r803 r46.microcredits_yield_per_epoch r855.microcredits_yield_per_epoch into r868;\n    ternary r803 r46.commission r855.commission into r869;\n    ternary r803 r46.boost r855.boost into r870;\n    cast r864 r865 r866 r867 r868 r869 r870 into r871 as validator_datum;\n    ternary r803 r801.delegator r863.delegator into r872;\n    ternary r803 r801.validator r863.validator into r873;\n    ternary r803 r801.block_height r863.block_height into r874;\n    ternary r803 r801.bonded_microcredits r863.bonded_microcredits into r875;\n    ternary r803 r801.microcredits_yield_per_epoch r863.microcredits_yield_per_epoch into r876;\n    ternary r803 r801.commission r863.commission into r877;\n    ternary r803 r801.boost r863.boost into r878;\n    cast r872 r873 r874 r875 r876 r877 r878 into r879 as validator_datum;\n    ternary r802 r801.delegator r871.delegator into r880;\n    ternary r802 r801.validator r871.validator into r881;\n    ternary r802 r801.block_height r871.block_height into r882;\n    ternary r802 r801.bonded_microcredits r871.bonded_microcredits into r883;\n    ternary r802 r801.microcredits_yield_per_epoch r871.microcredits_yield_per_epoch into r884;\n    ternary r802 r801.commission r871.commission into r885;\n    ternary r802 r801.boost r871.boost into r886;\n    cast r880 r881 r882 r883 r884 r885 r886 into r887 as validator_datum;\n    ternary r802 r46.delegator r879.delegator into r888;\n    ternary r802 r46.validator r879.validator into r889;\n    ternary r802 r46.block_height r879.block_height into r890;\n    ternary r802 r46.bonded_microcredits r879.bonded_microcredits into r891;\n    ternary r802 r46.microcredits_yield_per_epoch r879.microcredits_yield_per_epoch into r892;\n    ternary r802 r46.commission r879.commission into r893;\n    ternary r802 r46.boost r879.boost into r894;\n    cast r888 r889 r890 r891 r892 r893 r894 into r895 as validator_datum;\n    lt r47.block_height r48 into r896;\n    lt r895.block_height r48 into r897;\n    is.eq r47.microcredits_yield_per_epoch 0u128 into r898;\n    is.eq r895.microcredits_yield_per_epoch 0u128 into r899;\n    mul r895.boost 10_000u128 into r900;\n    div r900 r49[9u32] into r901;\n    add r895.microcredits_yield_per_epoch r901 into r902;\n    mul r47.boost 10_000u128 into r903;\n    div r903 r49[9u32] into r904;\n    add r47.microcredits_yield_per_epoch r904 into r905;\n    is.eq r895.validator r47.validator into r906;\n    gt r902 r905 into r907;\n    lt r902 r905 into r908;\n    ternary r906 r907 r908 into r909;\n    ternary r909 r47.delegator r895.delegator into r910;\n    ternary r909 r47.validator r895.validator into r911;\n    ternary r909 r47.block_height r895.block_height into r912;\n    ternary r909 r47.bonded_microcredits r895.bonded_microcredits into r913;\n    ternary r909 r47.microcredits_yield_per_epoch r895.microcredits_yield_per_epoch into r914;\n    ternary r909 r47.commission r895.commission into r915;\n    ternary r909 r47.boost r895.boost into r916;\n    cast r910 r911 r912 r913 r914 r915 r916 into r917 as validator_datum;\n    ternary r909 r895.delegator r47.delegator into r918;\n    ternary r909 r895.validator r47.validator into r919;\n    ternary r909 r895.block_height r47.block_height into r920;\n    ternary r909 r895.bonded_microcredits r47.bonded_microcredits into r921;\n    ternary r909 r895.microcredits_yield_per_epoch r47.microcredits_yield_per_epoch into r922;\n    ternary r909 r895.commission r47.commission into r923;\n    ternary r909 r895.boost r47.boost into r924;\n    cast r918 r919 r920 r921 r922 r923 r924 into r925 as validator_datum;\n    ternary r899 r47.delegator r917.delegator into r926;\n    ternary r899 r47.validator r917.validator into r927;\n    ternary r899 r47.block_height r917.block_height into r928;\n    ternary r899 r47.bonded_microcredits r917.bonded_microcredits into r929;\n    ternary r899 r47.microcredits_yield_per_epoch r917.microcredits_yield_per_epoch into r930;\n    ternary r899 r47.commission r917.commission into r931;\n    ternary r899 r47.boost r917.boost into r932;\n    cast r926 r927 r928 r929 r930 r931 r932 into r933 as validator_datum;\n    ternary r899 r895.delegator r925.delegator into r934;\n    ternary r899 r895.validator r925.validator into r935;\n    ternary r899 r895.block_height r925.block_height into r936;\n    ternary r899 r895.bonded_microcredits r925.bonded_microcredits into r937;\n    ternary r899 r895.microcredits_yield_per_epoch r925.microcredits_yield_per_epoch into r938;\n    ternary r899 r895.commission r925.commission into r939;\n    ternary r899 r895.boost r925.boost into r940;\n    cast r934 r935 r936 r937 r938 r939 r940 into r941 as validator_datum;\n    ternary r898 r895.delegator r933.delegator into r942;\n    ternary r898 r895.validator r933.validator into r943;\n    ternary r898 r895.block_height r933.block_height into r944;\n    ternary r898 r895.bonded_microcredits r933.bonded_microcredits into r945;\n    ternary r898 r895.microcredits_yield_per_epoch r933.microcredits_yield_per_epoch into r946;\n    ternary r898 r895.commission r933.commission into r947;\n    ternary r898 r895.boost r933.boost into r948;\n    cast r942 r943 r944 r945 r946 r947 r948 into r949 as validator_datum;\n    ternary r898 r47.delegator r941.delegator into r950;\n    ternary r898 r47.validator r941.validator into r951;\n    ternary r898 r47.block_height r941.block_height into r952;\n    ternary r898 r47.bonded_microcredits r941.bonded_microcredits into r953;\n    ternary r898 r47.microcredits_yield_per_epoch r941.microcredits_yield_per_epoch into r954;\n    ternary r898 r47.commission r941.commission into r955;\n    ternary r898 r47.boost r941.boost into r956;\n    cast r950 r951 r952 r953 r954 r955 r956 into r957 as validator_datum;\n    ternary r897 r47.delegator r949.delegator into r958;\n    ternary r897 r47.validator r949.validator into r959;\n    ternary r897 r47.block_height r949.block_height into r960;\n    ternary r897 r47.bonded_microcredits r949.bonded_microcredits into r961;\n    ternary r897 r47.microcredits_yield_per_epoch r949.microcredits_yield_per_epoch into r962;\n    ternary r897 r47.commission r949.commission into r963;\n    ternary r897 r47.boost r949.boost into r964;\n    cast r958 r959 r960 r961 r962 r963 r964 into r965 as validator_datum;\n    ternary r897 r895.delegator r957.delegator into r966;\n    ternary r897 r895.validator r957.validator into r967;\n    ternary r897 r895.block_height r957.block_height into r968;\n    ternary r897 r895.bonded_microcredits r957.bonded_microcredits into r969;\n    ternary r897 r895.microcredits_yield_per_epoch r957.microcredits_yield_per_epoch into r970;\n    ternary r897 r895.commission r957.commission into r971;\n    ternary r897 r895.boost r957.boost into r972;\n    cast r966 r967 r968 r969 r970 r971 r972 into r973 as validator_datum;\n    ternary r896 r895.delegator r965.delegator into r974;\n    ternary r896 r895.validator r965.validator into r975;\n    ternary r896 r895.block_height r965.block_height into r976;\n    ternary r896 r895.bonded_microcredits r965.bonded_microcredits into r977;\n    ternary r896 r895.microcredits_yield_per_epoch r965.microcredits_yield_per_epoch into r978;\n    ternary r896 r895.commission r965.commission into r979;\n    ternary r896 r895.boost r965.boost into r980;\n    cast r974 r975 r976 r977 r978 r979 r980 into r981 as validator_datum;\n    ternary r896 r47.delegator r973.delegator into r982;\n    ternary r896 r47.validator r973.validator into r983;\n    ternary r896 r47.block_height r973.block_height into r984;\n    ternary r896 r47.bonded_microcredits r973.bonded_microcredits into r985;\n    ternary r896 r47.microcredits_yield_per_epoch r973.microcredits_yield_per_epoch into r986;\n    ternary r896 r47.commission r973.commission into r987;\n    ternary r896 r47.boost r973.boost into r988;\n    cast r982 r983 r984 r985 r986 r987 r988 into r989 as validator_datum;\n    cast  r135 r229 r323 r417 r511 r605 r699 r793 r887 r981 r989 into r990 as [validator_datum; 11u32];\n    is.eq r990[0u32].delegator r35.delegator into r991;\n    is.eq r990[0u32].validator r35.validator into r992;\n    or r991 r992 into r993;\n    cast 0u8 into r994 as i8;\n    add 0u8 1u8 into r995;\n    ternary r993 r994 11i8 into r996;\n    ternary r993 r995 0u8 into r997;\n    is.eq r990[1u32].delegator r35.delegator into r998;\n    is.eq r990[1u32].validator r35.validator into r999;\n    or r998 r999 into r1000;\n    cast 1u8 into r1001 as i8;\n    add r997 1u8 into r1002;\n    ternary r1000 r1001 r996 into r1003;\n    ternary r1000 r1002 r997 into r1004;\n    is.eq r990[2u32].delegator r35.delegator into r1005;\n    is.eq r990[2u32].validator r35.validator into r1006;\n    or r1005 r1006 into r1007;\n    cast 2u8 into r1008 as i8;\n    add r1004 1u8 into r1009;\n    ternary r1007 r1008 r1003 into r1010;\n    ternary r1007 r1009 r1004 into r1011;\n    is.eq r990[3u32].delegator r35.delegator into r1012;\n    is.eq r990[3u32].validator r35.validator into r1013;\n    or r1012 r1013 into r1014;\n    cast 3u8 into r1015 as i8;\n    add r1011 1u8 into r1016;\n    ternary r1014 r1015 r1010 into r1017;\n    ternary r1014 r1016 r1011 into r1018;\n    is.eq r990[4u32].delegator r35.delegator into r1019;\n    is.eq r990[4u32].validator r35.validator into r1020;\n    or r1019 r1020 into r1021;\n    cast 4u8 into r1022 as i8;\n    add r1018 1u8 into r1023;\n    ternary r1021 r1022 r1017 into r1024;\n    ternary r1021 r1023 r1018 into r1025;\n    is.eq r990[5u32].delegator r35.delegator into r1026;\n    is.eq r990[5u32].validator r35.validator into r1027;\n    or r1026 r1027 into r1028;\n    cast 5u8 into r1029 as i8;\n    add r1025 1u8 into r1030;\n    ternary r1028 r1029 r1024 into r1031;\n    ternary r1028 r1030 r1025 into r1032;\n    is.eq r990[6u32].delegator r35.delegator into r1033;\n    is.eq r990[6u32].validator r35.validator into r1034;\n    or r1033 r1034 into r1035;\n    cast 6u8 into r1036 as i8;\n    add r1032 1u8 into r1037;\n    ternary r1035 r1036 r1031 into r1038;\n    ternary r1035 r1037 r1032 into r1039;\n    is.eq r990[7u32].delegator r35.delegator into r1040;\n    is.eq r990[7u32].validator r35.validator into r1041;\n    or r1040 r1041 into r1042;\n    cast 7u8 into r1043 as i8;\n    add r1039 1u8 into r1044;\n    ternary r1042 r1043 r1038 into r1045;\n    ternary r1042 r1044 r1039 into r1046;\n    is.eq r990[8u32].delegator r35.delegator into r1047;\n    is.eq r990[8u32].validator r35.validator into r1048;\n    or r1047 r1048 into r1049;\n    cast 8u8 into r1050 as i8;\n    add r1046 1u8 into r1051;\n    ternary r1049 r1050 r1045 into r1052;\n    ternary r1049 r1051 r1046 into r1053;\n    is.eq r990[9u32].delegator r35.delegator into r1054;\n    is.eq r990[9u32].validator r35.validator into r1055;\n    or r1054 r1055 into r1056;\n    cast 9u8 into r1057 as i8;\n    add r1053 1u8 into r1058;\n    ternary r1056 r1057 r1052 into r1059;\n    ternary r1056 r1058 r1053 into r1060;\n    gt r1060 1u8 into r1061;\n    ternary r1061 r1059 11i8 into r1062;\n    lt r1062 2i8 into r1063;\n    ternary r1063 r990[2u32].delegator r990[1u32].delegator into r1064;\n    lt r1062 3i8 into r1065;\n    ternary r1065 r990[3u32].delegator r990[2u32].delegator into r1066;\n    lt r1062 4i8 into r1067;\n    ternary r1067 r990[4u32].delegator r990[3u32].delegator into r1068;\n    lt r1062 5i8 into r1069;\n    ternary r1069 r990[5u32].delegator r990[4u32].delegator into r1070;\n    lt r1062 6i8 into r1071;\n    ternary r1071 r990[6u32].delegator r990[5u32].delegator into r1072;\n    lt r1062 7i8 into r1073;\n    ternary r1073 r990[7u32].delegator r990[6u32].delegator into r1074;\n    lt r1062 8i8 into r1075;\n    ternary r1075 r990[8u32].delegator r990[7u32].delegator into r1076;\n    lt r1062 9i8 into r1077;\n    ternary r1077 r990[9u32].delegator r990[8u32].delegator into r1078;\n    lt r1062 10i8 into r1079;\n    ternary r1079 r990[10u32].delegator r990[9u32].delegator into r1080;\n    cast  r990[0u32].delegator r1064 r1066 r1068 r1070 r1072 r1074 r1076 r1078 r1080 into r1081 as [address; 10u32];\n    set r1081 into top_validators[0u8];\n    set r35 into validator_data[r0];\n\n\n\n\n\n\nfunction remove_delegator:\n    async remove_delegator self.caller into r0;\n    output r0 as pondo_oracle.aleo/remove_delegator.future;\n\nfinalize remove_delegator:\n    input r0 as address.public;\n    rem block.height 120_960u32 into r1;\n    lt r1 103_680u32 into r2;\n    assert.eq r2 true;\n    contains delegator_to_validator[r0] into r3;\n    branch.eq r3 false to end_then_0_0;\n    remove delegator_to_validator[r0];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    contains validator_data[r0] into r4;\n    branch.eq r4 false to end_then_0_2;\n    remove validator_data[r0];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n    get top_validators[0u8] into r5;\n    is.eq r5[0u32] r0 into r6;\n    ternary r6 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[0u32] into r7;\n    is.eq r5[1u32] r0 into r8;\n    ternary r8 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[1u32] into r9;\n    is.eq r5[2u32] r0 into r10;\n    ternary r10 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[2u32] into r11;\n    is.eq r5[3u32] r0 into r12;\n    ternary r12 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[3u32] into r13;\n    is.eq r5[4u32] r0 into r14;\n    ternary r14 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[4u32] into r15;\n    is.eq r5[5u32] r0 into r16;\n    ternary r16 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[5u32] into r17;\n    is.eq r5[6u32] r0 into r18;\n    ternary r18 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[6u32] into r19;\n    is.eq r5[7u32] r0 into r20;\n    ternary r20 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[7u32] into r21;\n    is.eq r5[8u32] r0 into r22;\n    ternary r22 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[8u32] into r23;\n    is.eq r5[9u32] r0 into r24;\n    ternary r24 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r5[9u32] into r25;\n    is.eq r7 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r26;\n    ternary r26 r9 r7 into r27;\n    ternary r26 r7 r9 into r28;\n    is.eq r28 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r29;\n    ternary r29 r11 r28 into r30;\n    ternary r29 r28 r11 into r31;\n    is.eq r31 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r32;\n    ternary r32 r13 r31 into r33;\n    ternary r32 r31 r13 into r34;\n    is.eq r34 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r35;\n    ternary r35 r15 r34 into r36;\n    ternary r35 r34 r15 into r37;\n    is.eq r37 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r38;\n    ternary r38 r17 r37 into r39;\n    ternary r38 r37 r17 into r40;\n    is.eq r40 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r41;\n    ternary r41 r19 r40 into r42;\n    ternary r41 r40 r19 into r43;\n    is.eq r43 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r44;\n    ternary r44 r21 r43 into r45;\n    ternary r44 r43 r21 into r46;\n    is.eq r46 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r47;\n    ternary r47 r23 r46 into r48;\n    ternary r47 r46 r23 into r49;\n    is.eq r49 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r50;\n    ternary r50 r25 r49 into r51;\n    ternary r50 r49 r25 into r52;\n    cast  r27 r30 r33 r36 r39 r42 r45 r48 r51 r52 into r53 as [address; 10u32];\n    set r53 into top_validators[0u8];\n\n\n\n\nfunction pondo_ban_validator:\n    input r0 as address.public;\n    assert.neq r0 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;\n    async pondo_ban_validator r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n\nfinalize pondo_ban_validator:\n    input r0 as address.public;\n    input r1 as address.public;\n    contains control_addresses[r1] into r2;\n    assert.eq r2 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    async ban_validator r0 into r1;\n    output r1 as pondo_oracle.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    get delegator_to_validator[r0] into r1;\n    rem block.height 120_960u32 into r2;\n    gte r2 103_680u32 into r3;\n    assert.eq r3 true;\n    add 50u8 1u8 into r4;\n    cast false r4 into r5 as committee_state;\n    get.or_use credits.aleo/committee[r1] r5 into r6;\n    not r6.is_open into r7;\n    gt r6.commission 50u8 into r8;\n    or r7 r8 into r9;\n    assert.eq r9 true;\n    set true into banned_validators[r1];\n\n\n\n\nfunction set_pondo_tvl:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_pondo_tvl r0 into r1;\n    output r1 as pondo_oracle.aleo/set_pondo_tvl.future;\n\nfinalize set_pondo_tvl:\n    input r0 as u64.public;\n    set r0 into pondo_tvl[0u8];\n\n\n\n\nfunction ban_self:\n    input r0 as address.private;\n    async ban_self r0 self.caller into r1;\n    output r1 as pondo_oracle.aleo/ban_self.future;\n\nfinalize ban_self:\n    input r0 as address.public;\n    input r1 as address.public;\n    get credits.aleo/withdraw[r0] into r2;\n    assert.eq r2 r1;\n    contains credits.aleo/committee[r0] into r3;\n    assert.eq r3 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction boost_validator:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r1 into r2;\n    async boost_validator r2 r0 r1 into r3;\n    output r3 as pondo_oracle.aleo/boost_validator.future;\n\nfinalize boost_validator:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    div block.height 120_960u32 into r3;\n    rem block.height 120_960u32 into r4;\n    gte r4 103_680u32 into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast 0u32 0u64 into r7 as validator_boost;\n    get.or_use validator_boosting[r1] r7 into r8;\n    is.eq r8.epoch r3 into r9;\n    add r8.boost_amount r2 into r10;\n    ternary r9 r10 r2 into r11;\n    cast r3 r11 into r12 as validator_boost;\n    set r12 into validator_boosting[r1];\n\n",
  "pondo_staked_aleo_token.aleo": "import credits.aleo;\nimport multi_token_support_program_v02.aleo;\nprogram pondo_staked_aleo_token.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\n\n\nfunction register_token:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call multi_token_support_program_v02.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842600field 1631421259099656974472467909989204u128 482131854671u128 6u8 1_000_000_000_000_000u128 false pondo_staked_aleo_token.aleo into r0;\n    async register_token r0 into r1;\n    output r1 as pondo_staked_aleo_token.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as multi_token_support_program_v02.aleo/register_token.future;\n    await r0;\n\n\n\n\nfunction mint_public:\n    input r0 as u64.public;\n    input r1 as address.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    cast r0 into r2 as u128;\n    call multi_token_support_program_v02.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r1 r2 4294967295u32 into r3;\n    async mint_public r3 into r4;\n    output r4 as pondo_staked_aleo_token.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as multi_token_support_program_v02.aleo/mint_public.future;\n    await r0;\n\n\n\n\nfunction burn_public:\n    input r0 as u64.public;\n    input r1 as address.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    cast r0 into r2 as u128;\n    call multi_token_support_program_v02.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r1 r2 into r3;\n    async burn_public r3 into r4;\n    output r4 as pondo_staked_aleo_token.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as multi_token_support_program_v02.aleo/burn_public.future;\n    await r0;\n\n",
  "pondo_token.aleo": "import credits.aleo;\nimport multi_token_support_program_v02.aleo;\nprogram pondo_token.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\n\n\nmapping has_minted:\n\tkey as u8.public;\n\tvalue as boolean.public;\n\n\nfunction mint_public:\n    assert.eq self.caller aleo1hmrpe0ts2khluprhex3y46cqqy44pme7lwc40ls9nexftx0xhu8sxxpnd0;\n    call multi_token_support_program_v02.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field aleo1hmrpe0ts2khluprhex3y46cqqy44pme7lwc40ls9nexftx0xhu8sxxpnd0 1_000_000_000_000_000u128 4294967295u32 into r0;\n    async mint_public r0 into r1;\n    output r1 as pondo_token.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as multi_token_support_program_v02.aleo/mint_public.future;\n    await r0;\n    contains has_minted[0u8] into r1;\n    not r1 into r2;\n    assert.eq r2 true;\n    set true into has_minted[0u8];\n\n\n\n\nfunction burn_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    gt r1 0u128 into r3;\n    assert.eq r3 true;\n    gt r2 0u128 into r4;\n    assert.eq r4 true;\n    is.eq self.signer r0 into r5;\n    is.eq self.caller r0 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    call multi_token_support_program_v02.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field r0 r1 into r8;\n    call multi_token_support_program_v02.aleo/transfer_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r0 r2 into r9;\n    async burn_public r8 r9 r1 r2 into r10;\n    output r10 as pondo_token.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as multi_token_support_program_v02.aleo/burn_public.future;\n    input r1 as multi_token_support_program_v02.aleo/transfer_public.future;\n    input r2 as u128.public;\n    input r3 as u128.public;\n    await r0;\n    await r1;\n    get multi_token_support_program_v02.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842601field] into r4;\n    cast pondo_token.aleo 1751493913335802797273486270793650302076377624243810059080883537084141842600field into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get multi_token_support_program_v02.aleo/authorized_balances[r6] into r7;\n    mul r4.supply 1_000_000u128 into r8;\n    div r8 r7.balance into r9;\n    mul r2 1_000_000u128 into r10;\n    div r10 r3 into r11;\n    lte r9 r11 into r12;\n    assert.eq r12 true;\n\n\n\n\nfunction initialize_token:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call multi_token_support_program_v02.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842601field 97240284627655645872219502u128 1347306575u128 6u8 1_000_000_000_000_000u128 false pondo_token.aleo into r0;\n    async initialize_token r0 into r1;\n    output r1 as pondo_token.aleo/initialize_token.future;\n\nfinalize initialize_token:\n    input r0 as multi_token_support_program_v02.aleo/register_token.future;\n    await r0;\n\n",
  "reference_delegator.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram reference_delegator.aleo;\n\n\n\nmapping initialized:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nfunction initialize:\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/transfer_public_as_signer reference_delegator.aleo 10_000_000_000u64 into r0;\n    call credits.aleo/bond_public aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt reference_delegator.aleo 10_000_000_000u64 into r1;\n    call pondo_oracle.aleo/propose_delegator aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt into r2;\n    async initialize r0 r1 r2 into r3;\n    output r3 as reference_delegator.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as credits.aleo/bond_public.future;\n    input r2 as pondo_oracle.aleo/propose_delegator.future;\n    await r0;\n    await r1;\n    await r2;\n    contains initialized[0u8] into r3;\n    assert.eq r3 false;\n    set 8u8 into initialized[0u8];\n\n\n\n\nfunction remove:\n    input r0 as u64.public;\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/unbond_public reference_delegator.aleo r0 into r1;\n    call pondo_oracle.aleo/remove_delegator into r2;\n    async remove r1 r2 into r3;\n    output r3 as reference_delegator.aleo/remove.future;\n\nfinalize remove:\n    input r0 as credits.aleo/unbond_public.future;\n    input r1 as pondo_oracle.aleo/remove_delegator.future;\n    await r0;\n    await r1;\n    contains credits.aleo/bonded[reference_delegator.aleo] into r2;\n    assert.eq r2 false;\n\n\n\n\nfunction withdraw:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0 r0 into r1;\n    async withdraw r1 into r2;\n    output r2 as reference_delegator.aleo/withdraw.future;\n\nfinalize withdraw:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get.or_use credits.aleo/account[reference_delegator.aleo] 0u64 into r1;\n    assert.eq r1 0u64;\n\n",
  "pondo_delegator1.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator1.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator1.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator1.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator1.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator2.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator2.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator2.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator2.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator2.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator2.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator2.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator2.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator2.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator2.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator2.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator2.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator2.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator2.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator2.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator2.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator2.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator2.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator3.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator3.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator3.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator3.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator3.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator3.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator3.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator3.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator3.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator3.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator3.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator3.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator3.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator3.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator3.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator3.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator3.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator3.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator4.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator4.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator4.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator4.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator4.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator4.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator4.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator4.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator4.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator4.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator4.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator4.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator4.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator4.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator4.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator4.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator4.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator4.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "pondo_delegator5.aleo": "import credits.aleo;\nimport pondo_oracle.aleo;\nprogram pondo_delegator5.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator5.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oracle.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator5.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oracle.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator5.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 0u8 into r1;\n    assert.eq r1 true;\n    is.neq r0 3u8 into r2;\n    assert.eq r2 true;\n    is.eq r0 1u8 into r3;\n    branch.eq r3 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator5.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator5.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator5.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator5.aleo] into r3;\n    assert.eq r3 0u64;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    is.eq r4 1u8 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator5.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator5.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_2;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_3;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator5.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_4;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    position end_otherwise_0_5;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocol.aleo;\n    call credits.aleo/transfer_public pondo_core_protocol.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator5.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator5.aleo] into r1;\n    assert.eq r1 0u64;\n    get state_mapping[0u8] into r2;\n    assert.eq r2 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator5.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    get credits.aleo/committee[r2.validator] into r3;\n    contains credits.aleo/unbonding[r2.validator] into r4;\n    is.eq r3.is_open false into r5;\n    or r5 r4 into r6;\n    assert.eq r6 true;\n    get state_mapping[0u8] into r7;\n    is.eq r7 0u8 into r8;\n    assert.eq r8 true;\n    set 4u8 into state_mapping[0u8];\n    is.eq r3.is_open false into r9;\n    branch.eq r9 false to end_then_0_6;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n\n\n\n\nfunction insufficient_balance:\n    async insufficient_balance into r0;\n    output r0 as pondo_delegator5.aleo/insufficient_balance.future;\n\nfinalize insufficient_balance:\n    contains credits.aleo/bonded[pondo_delegator5.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5.aleo] into r1;\n    assert.eq r1 false;\n    get credits.aleo/account[pondo_delegator5.aleo] into r2;\n    lt r2 10_000_000_000u64 into r3;\n    assert.eq r3 true;\n    get state_mapping[0u8] into r4;\n    is.eq r4 0u8 into r5;\n    assert.eq r5 true;\n    set 4u8 into state_mapping[0u8];\n\n",
  "test_program.aleo": "import credits.aleo;\nimport multi_token_support_program_v02.aleo;\nimport pondo_oracle.aleo;\nimport pondo_staked_aleo_token.aleo;\nimport pondo_token.aleo;\nimport pondo_delegator1.aleo;\nimport pondo_delegator2.aleo;\nimport pondo_delegator3.aleo;\nimport pondo_delegator4.aleo;\nimport pondo_delegator5.aleo;\nimport pondo_core_protocol.aleo;\nprogram test_program.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\n\nfunction double_deposit:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    call pondo_core_protocol.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r2;\n    call pondo_core_protocol.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r3;\n    async double_deposit r2 r3 into r4;\n    output r4 as test_program.aleo/double_deposit.future;\n\nfinalize double_deposit:\n    input r0 as pondo_core_protocol.aleo/deposit_public_as_signer.future;\n    input r1 as pondo_core_protocol.aleo/deposit_public_as_signer.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_withdraw:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    call pondo_core_protocol.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r2;\n    call pondo_core_protocol.aleo/withdraw_public r1 into r3;\n    async deposit_withdraw r2 r3 into r4;\n    output r4 as test_program.aleo/deposit_withdraw.future;\n\nfinalize deposit_withdraw:\n    input r0 as pondo_core_protocol.aleo/deposit_public_as_signer.future;\n    input r1 as pondo_core_protocol.aleo/withdraw_public.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_instant_withdraw:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    call multi_token_support_program_v02.aleo/deposit_credits_public r0 into r2;\n    cast r0 into r3 as u128;\n    call multi_token_support_program_v02.aleo/approve_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field pondo_core_protocol.aleo r3 into r4;\n    call pondo_core_protocol.aleo/deposit_public r0 r1 test_program.aleo into r5;\n    call pondo_core_protocol.aleo/instant_withdraw_public r1 r0 into r6;\n    async deposit_instant_withdraw r2 r4 r5 r6 into r7;\n    output r7 as test_program.aleo/deposit_instant_withdraw.future;\n\nfinalize deposit_instant_withdraw:\n    input r0 as multi_token_support_program_v02.aleo/deposit_credits_public.future;\n    input r1 as multi_token_support_program_v02.aleo/approve_public.future;\n    input r2 as pondo_core_protocol.aleo/deposit_public.future;\n    input r3 as pondo_core_protocol.aleo/instant_withdraw_public.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n\n"
};