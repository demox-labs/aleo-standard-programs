import credits.aleo;
program pondo_oracle.aleo;

struct committee_state:
    is_open as boolean;
    commission as u8;

struct bond_state:
    validator as address;
    microcredits as u64;


struct validator_datum:
    delegator as address;
    validator as address;
    block_height as u32;
    bonded_microcredits as u64;
    microcredits_yield_per_epoch as u128;
    commission as u8;
    boost as u128;

struct validator_boost:
    epoch as u32;
    boost_amount as u64;

struct admin_operation:
    arg as field;
    op_type as u8;
    request_id as u64;


mapping delegator_to_validator:
	key as address.public;
	value as address.public;


mapping validator_data:
	key as address.public;
	value as validator_datum.public;


mapping top_validators:
	key as u8.public;
	value as [address; 10u32].public;


mapping banned_validators:
	key as address.public;
	value as boolean.public;


mapping pondo_tvl:
	key as u8.public;
	value as u64.public;


mapping validator_boosting:
	key as address.public;
	value as validator_boost.public;


mapping control_addresses:
	key as address.public;
	value as boolean.public;


mapping delegator_allocation:
	key as u8.public;
	value as [u128; 10u32].public;


mapping admin_operations:
	key as u64.public;
	value as admin_operation.public;


function initialize:
    async initialize into r0;
    output r0 as pondo_oracle.aleo/initialize.future;

finalize initialize:
    contains delegator_allocation[0u8] into r0;
    assert.eq r0 false;
    contains top_validators[0u8] into r1;
    assert.eq r1 false;
    set true into control_addresses[aleo1rgrwlanlqgt9zwsp44mu9auamv4n9psgej952hfhf3gwnv6zfypqjp0nd0];
    set true into control_addresses[aleo1xghzslag90d5vmy3s4szptyf6xxtutkruj2fknw96966sz53m5gqvp0nd0];
    set true into control_addresses[aleo10jmv5a8tcwuaf3ydr7uhe43s5d7zr450vlkjz3nx0jvkygdn5upq20racl];
    set true into control_addresses[aleo1asrq67xpp9vxtnllkw5dxupxr52q7eqptndhce7nlzqt785ltqpq4tpnd0];
    set true into control_addresses[aleo1vc3gp7cs49lwsxevvfzl7hva68yqtcd9jcc4dr96h0rg3zfnduyqkyh9y4];
    set false into control_addresses[pondo_delegator1.aleo];
    set false into control_addresses[pondo_delegator2.aleo];
    set false into control_addresses[pondo_delegator3.aleo];
    set false into control_addresses[pondo_delegator4.aleo];
    set false into control_addresses[pondo_delegator5.aleo];
    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r2 as [u128; 10u32];
    set r2 into delegator_allocation[0u8];
    cast  pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo pondo_oracle.aleo into r3 as [address; 10u32];
    set r3 into top_validators[0u8];




function add_control_address:
    input r0 as address.public;
    input r1 as signature.public;
    input r2 as address.public;
    input r3 as signature.public;
    input r4 as address.public;
    input r5 as signature.public;
    input r6 as address.public;
    input r7 as u64.public;
    hash.bhp256 r0 into r8 as field;
    cast r8 0u8 r7 into r9 as admin_operation;
    hash.bhp256 r9 into r10 as field;
    sign.verify r1 r2 r10 into r11;
    sign.verify r3 r4 r10 into r12;
    sign.verify r5 r6 r10 into r13;
    and r11 r12 into r14;
    and r14 r13 into r15;
    assert.eq r15 true;
    assert.neq r2 r4;
    assert.neq r2 r6;
    assert.neq r4 r6;
    async add_control_address r0 r2 r4 r6 r9 into r16;
    output r16 as pondo_oracle.aleo/add_control_address.future;

finalize add_control_address:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as admin_operation.public;
    get control_addresses[r1] into r5;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    and r5 r6 into r8;
    and r8 r7 into r9;
    assert.eq r9 true;
    contains admin_operations[r4.request_id] into r10;
    assert.eq r10 false;
    set r4 into admin_operations[r4.request_id];
    contains control_addresses[r0] into r11;
    assert.eq r11 false;
    set false into control_addresses[r0];




function remove_control_address:
    input r0 as address.public;
    input r1 as signature.public;
    input r2 as address.public;
    input r3 as signature.public;
    input r4 as address.public;
    input r5 as signature.public;
    input r6 as address.public;
    input r7 as u64.public;
    hash.bhp256 r0 into r8 as field;
    cast r8 1u8 r7 into r9 as admin_operation;
    hash.bhp256 r9 into r10 as field;
    sign.verify r1 r2 r10 into r11;
    sign.verify r3 r4 r10 into r12;
    sign.verify r5 r6 r10 into r13;
    and r11 r12 into r14;
    and r14 r13 into r15;
    assert.eq r15 true;
    assert.neq r2 r4;
    assert.neq r2 r6;
    assert.neq r4 r6;
    async remove_control_address r0 r2 r4 r6 r9 into r16;
    output r16 as pondo_oracle.aleo/remove_control_address.future;

finalize remove_control_address:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as admin_operation.public;
    get control_addresses[r1] into r5;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    and r5 r6 into r8;
    and r8 r7 into r9;
    assert.eq r9 true;
    contains admin_operations[r4.request_id] into r10;
    assert.eq r10 false;
    set r4 into admin_operations[r4.request_id];
    get control_addresses[r0] into r11;
    assert.eq r11 false;
    remove control_addresses[r0];




function update_admin:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as signature.public;
    input r3 as address.public;
    input r4 as signature.public;
    input r5 as address.public;
    input r6 as signature.public;
    input r7 as address.public;
    input r8 as u64.public;
    cast  r0 r1 into r9 as [address; 2u32];
    hash.bhp256 r9 into r10 as field;
    cast r10 3u8 r8 into r11 as admin_operation;
    hash.bhp256 r11 into r12 as field;
    sign.verify r2 r3 r12 into r13;
    sign.verify r4 r5 r12 into r14;
    sign.verify r6 r7 r12 into r15;
    and r13 r14 into r16;
    and r16 r15 into r17;
    assert.eq r17 true;
    assert.neq r3 r5;
    assert.neq r3 r7;
    assert.neq r5 r7;
    async update_admin r0 r1 r3 r5 r7 r11 into r18;
    output r18 as pondo_oracle.aleo/update_admin.future;

finalize update_admin:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as address.public;
    input r5 as admin_operation.public;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    get control_addresses[r4] into r8;
    and r6 r7 into r9;
    and r9 r8 into r10;
    assert.eq r10 true;
    contains admin_operations[r5.request_id] into r11;
    assert.eq r11 false;
    set r5 into admin_operations[r5.request_id];
    remove control_addresses[r0];
    set true into control_addresses[r1];




function update_delegator_allocations:
    input r0 as [u128; 10u32].public;
    input r1 as signature.public;
    input r2 as address.public;
    input r3 as signature.public;
    input r4 as address.public;
    input r5 as signature.public;
    input r6 as address.public;
    input r7 as u64.public;
    hash.bhp256 r0 into r8 as field;
    cast r8 2u8 r7 into r9 as admin_operation;
    hash.bhp256 r9 into r10 as field;
    sign.verify r1 r2 r10 into r11;
    sign.verify r3 r4 r10 into r12;
    sign.verify r5 r6 r10 into r13;
    and r11 r12 into r14;
    and r14 r13 into r15;
    assert.eq r15 true;
    assert.neq r2 r4;
    assert.neq r2 r6;
    assert.neq r4 r6;
    async update_delegator_allocations r0 r2 r4 r6 r9 into r16;
    output r16 as pondo_oracle.aleo/update_delegator_allocations.future;

finalize update_delegator_allocations:
    input r0 as [u128; 10u32].public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as admin_operation.public;
    get control_addresses[r1] into r5;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    and r5 r6 into r8;
    and r8 r7 into r9;
    assert.eq r9 true;
    contains admin_operations[r4.request_id] into r10;
    assert.eq r10 false;
    set r4 into admin_operations[r4.request_id];
    set r0 into delegator_allocation[0u8];




function propose_delegator:
    input r0 as address.public;
    assert.neq self.caller self.signer;
    async propose_delegator self.caller r0 into r1;
    output r1 as pondo_oracle.aleo/propose_delegator.future;

finalize propose_delegator:
    input r0 as address.public;
    input r1 as address.public;
    contains banned_validators[r1] into r2;
    assert.eq r2 false;
    contains delegator_to_validator[r0] into r3;
    assert.eq r3 false;
    set r1 into delegator_to_validator[r0];




function add_delegator:
    input r0 as address.public;
    input r1 as signature.public;
    input r2 as address.public;
    input r3 as signature.public;
    input r4 as address.public;
    input r5 as signature.public;
    input r6 as address.public;
    input r7 as u64.public;
    hash.bhp256 r0 into r8 as field;
    cast r8 4u8 r7 into r9 as admin_operation;
    hash.bhp256 r9 into r10 as field;
    sign.verify r1 r2 r10 into r11;
    sign.verify r3 r4 r10 into r12;
    sign.verify r5 r6 r10 into r13;
    and r11 r12 into r14;
    and r14 r13 into r15;
    assert.eq r15 true;
    assert.neq r2 r4;
    assert.neq r2 r6;
    assert.neq r4 r6;
    async add_delegator r0 r2 r4 r6 r9 into r16;
    output r16 as pondo_oracle.aleo/add_delegator.future;

finalize add_delegator:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as admin_operation.public;
    get control_addresses[r1] into r5;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    and r5 r6 into r8;
    and r8 r7 into r9;
    assert.eq r9 true;
    contains admin_operations[r4.request_id] into r10;
    assert.eq r10 false;
    set r4 into admin_operations[r4.request_id];
    contains delegator_to_validator[r0] into r11;
    assert.eq r11 true;
    get credits.aleo/withdraw[r0] into r12;
    assert.eq r12 r0;
    get delegator_to_validator[r0] into r13;
    get credits.aleo/bonded[r0] into r14;
    assert.eq r14.validator r13;
    contains banned_validators[r13] into r15;
    assert.eq r15 false;
    contains validator_data[r0] into r16;
    assert.eq r16 false;
    get credits.aleo/committee[r13] into r17;
    assert.eq r17.is_open true;
    lt r17.commission 50u8 into r18;
    assert.eq r18 true;
    cast r0 r13 block.height r14.microcredits 0u128 r17.commission 0u128 into r19 as validator_datum;
    set r19 into validator_data[r0];








function update_data:
    input r0 as address.public;
    async update_data r0 into r1;
    output r1 as pondo_oracle.aleo/update_data.future;

finalize update_data:
    input r0 as address.public;
    get validator_data[r0] into r1;
    contains banned_validators[r1.validator] into r2;
    assert.eq r2 false;
    rem block.height 80_888u32 into r3;
    gte r3 78_008u32 into r4;
    assert.eq r4 true;
    sub block.height r1.block_height into r5;
    gt r5 78_008u32 into r6;
    assert.eq r6 true;
    get credits.aleo/committee[r1.validator] into r7;
    lt r7.commission 50u8 into r8;
    assert.eq r8 true;
    assert.eq r7.is_open true;
    get credits.aleo/bonded[r0] into r9;
    div block.height 80_888u32 into r10;
    cast r9.microcredits into r11 as u128;
    cast r1.bonded_microcredits into r12 as u128;
    sub r11 r12 into r13;
    mul r13 10_000_000_000u128 into r14;
    cast r1.bonded_microcredits into r15 as u128;
    div r14 r15 into r16;
    cast 80_888u32 into r17 as u128;
    mul r16 r17 into r18;
    cast r5 into r19 as u128;
    div r18 r19 into r20;
    cast 0u32 0u64 into r21 as validator_boost;
    get.or_use validator_boosting[r1.validator] r21 into r22;
    is.eq r22.epoch r10 into r23;
    cast r22.boost_amount into r24 as u128;
    ternary r23 r24 0u128 into r25;
    get.or_use pondo_tvl[0u8] 10_000_000_000_000_000u64 into r26;
    cast r26 into r27 as u128;
    mul r25 10_000_000_000u128 into r28;
    cast r27 into r29 as u128;
    div r28 r29 into r30;
    div r1.block_height 80_888u32 into r31;
    add r31 1u32 into r32;
    is.eq r32 r10 into r33;
    ternary r33 r20 0u128 into r34;
    cast r0 r1.validator block.height r9.microcredits r34 r7.commission r30 into r35 as validator_datum;
    get top_validators[0u8] into r36;
    cast pondo_oracle.aleo pondo_oracle.aleo 0u32 0u64 0u128 0u8 0u128 into r37 as validator_datum;
    get.or_use validator_data[r36[0u32]] r37 into r38;
    get.or_use validator_data[r36[1u32]] r37 into r39;
    get.or_use validator_data[r36[2u32]] r37 into r40;
    get.or_use validator_data[r36[3u32]] r37 into r41;
    get.or_use validator_data[r36[4u32]] r37 into r42;
    get.or_use validator_data[r36[5u32]] r37 into r43;
    get.or_use validator_data[r36[6u32]] r37 into r44;
    get.or_use validator_data[r36[7u32]] r37 into r45;
    get.or_use validator_data[r36[8u32]] r37 into r46;
    get.or_use validator_data[r36[9u32]] r37 into r47;
    mul r10 80_888u32 into r48;
    get delegator_allocation[0u8] into r49;
    lt r38.block_height r48 into r50;
    lt r35.block_height r48 into r51;
    is.eq r38.microcredits_yield_per_epoch 0u128 into r52;
    is.eq r35.microcredits_yield_per_epoch 0u128 into r53;
    mul r35.boost 10_000u128 into r54;
    div r54 r49[0u32] into r55;
    add r35.microcredits_yield_per_epoch r55 into r56;
    mul r38.boost 10_000u128 into r57;
    div r57 r49[0u32] into r58;
    add r38.microcredits_yield_per_epoch r58 into r59;
    lt r56 r59 into r60;
    ternary r60 r38.delegator r35.delegator into r61;
    ternary r60 r38.validator r35.validator into r62;
    ternary r60 r38.block_height r35.block_height into r63;
    ternary r60 r38.bonded_microcredits r35.bonded_microcredits into r64;
    ternary r60 r38.microcredits_yield_per_epoch r35.microcredits_yield_per_epoch into r65;
    ternary r60 r38.commission r35.commission into r66;
    ternary r60 r38.boost r35.boost into r67;
    cast r61 r62 r63 r64 r65 r66 r67 into r68 as validator_datum;
    ternary r60 r35.delegator r38.delegator into r69;
    ternary r60 r35.validator r38.validator into r70;
    ternary r60 r35.block_height r38.block_height into r71;
    ternary r60 r35.bonded_microcredits r38.bonded_microcredits into r72;
    ternary r60 r35.microcredits_yield_per_epoch r38.microcredits_yield_per_epoch into r73;
    ternary r60 r35.commission r38.commission into r74;
    ternary r60 r35.boost r38.boost into r75;
    cast r69 r70 r71 r72 r73 r74 r75 into r76 as validator_datum;
    ternary r53 r38.delegator r68.delegator into r77;
    ternary r53 r38.validator r68.validator into r78;
    ternary r53 r38.block_height r68.block_height into r79;
    ternary r53 r38.bonded_microcredits r68.bonded_microcredits into r80;
    ternary r53 r38.microcredits_yield_per_epoch r68.microcredits_yield_per_epoch into r81;
    ternary r53 r38.commission r68.commission into r82;
    ternary r53 r38.boost r68.boost into r83;
    cast r77 r78 r79 r80 r81 r82 r83 into r84 as validator_datum;
    ternary r53 r35.delegator r76.delegator into r85;
    ternary r53 r35.validator r76.validator into r86;
    ternary r53 r35.block_height r76.block_height into r87;
    ternary r53 r35.bonded_microcredits r76.bonded_microcredits into r88;
    ternary r53 r35.microcredits_yield_per_epoch r76.microcredits_yield_per_epoch into r89;
    ternary r53 r35.commission r76.commission into r90;
    ternary r53 r35.boost r76.boost into r91;
    cast r85 r86 r87 r88 r89 r90 r91 into r92 as validator_datum;
    ternary r52 r35.delegator r84.delegator into r93;
    ternary r52 r35.validator r84.validator into r94;
    ternary r52 r35.block_height r84.block_height into r95;
    ternary r52 r35.bonded_microcredits r84.bonded_microcredits into r96;
    ternary r52 r35.microcredits_yield_per_epoch r84.microcredits_yield_per_epoch into r97;
    ternary r52 r35.commission r84.commission into r98;
    ternary r52 r35.boost r84.boost into r99;
    cast r93 r94 r95 r96 r97 r98 r99 into r100 as validator_datum;
    ternary r52 r38.delegator r92.delegator into r101;
    ternary r52 r38.validator r92.validator into r102;
    ternary r52 r38.block_height r92.block_height into r103;
    ternary r52 r38.bonded_microcredits r92.bonded_microcredits into r104;
    ternary r52 r38.microcredits_yield_per_epoch r92.microcredits_yield_per_epoch into r105;
    ternary r52 r38.commission r92.commission into r106;
    ternary r52 r38.boost r92.boost into r107;
    cast r101 r102 r103 r104 r105 r106 r107 into r108 as validator_datum;
    ternary r51 r38.delegator r100.delegator into r109;
    ternary r51 r38.validator r100.validator into r110;
    ternary r51 r38.block_height r100.block_height into r111;
    ternary r51 r38.bonded_microcredits r100.bonded_microcredits into r112;
    ternary r51 r38.microcredits_yield_per_epoch r100.microcredits_yield_per_epoch into r113;
    ternary r51 r38.commission r100.commission into r114;
    ternary r51 r38.boost r100.boost into r115;
    cast r109 r110 r111 r112 r113 r114 r115 into r116 as validator_datum;
    ternary r51 r35.delegator r108.delegator into r117;
    ternary r51 r35.validator r108.validator into r118;
    ternary r51 r35.block_height r108.block_height into r119;
    ternary r51 r35.bonded_microcredits r108.bonded_microcredits into r120;
    ternary r51 r35.microcredits_yield_per_epoch r108.microcredits_yield_per_epoch into r121;
    ternary r51 r35.commission r108.commission into r122;
    ternary r51 r35.boost r108.boost into r123;
    cast r117 r118 r119 r120 r121 r122 r123 into r124 as validator_datum;
    ternary r50 r35.delegator r116.delegator into r125;
    ternary r50 r35.validator r116.validator into r126;
    ternary r50 r35.block_height r116.block_height into r127;
    ternary r50 r35.bonded_microcredits r116.bonded_microcredits into r128;
    ternary r50 r35.microcredits_yield_per_epoch r116.microcredits_yield_per_epoch into r129;
    ternary r50 r35.commission r116.commission into r130;
    ternary r50 r35.boost r116.boost into r131;
    cast r125 r126 r127 r128 r129 r130 r131 into r132 as validator_datum;
    ternary r50 r38.delegator r124.delegator into r133;
    ternary r50 r38.validator r124.validator into r134;
    ternary r50 r38.block_height r124.block_height into r135;
    ternary r50 r38.bonded_microcredits r124.bonded_microcredits into r136;
    ternary r50 r38.microcredits_yield_per_epoch r124.microcredits_yield_per_epoch into r137;
    ternary r50 r38.commission r124.commission into r138;
    ternary r50 r38.boost r124.boost into r139;
    cast r133 r134 r135 r136 r137 r138 r139 into r140 as validator_datum;
    lt r39.block_height r48 into r141;
    lt r140.block_height r48 into r142;
    is.eq r39.microcredits_yield_per_epoch 0u128 into r143;
    is.eq r140.microcredits_yield_per_epoch 0u128 into r144;
    mul r140.boost 10_000u128 into r145;
    div r145 r49[1u32] into r146;
    add r140.microcredits_yield_per_epoch r146 into r147;
    mul r39.boost 10_000u128 into r148;
    div r148 r49[1u32] into r149;
    add r39.microcredits_yield_per_epoch r149 into r150;
    lt r147 r150 into r151;
    ternary r151 r39.delegator r140.delegator into r152;
    ternary r151 r39.validator r140.validator into r153;
    ternary r151 r39.block_height r140.block_height into r154;
    ternary r151 r39.bonded_microcredits r140.bonded_microcredits into r155;
    ternary r151 r39.microcredits_yield_per_epoch r140.microcredits_yield_per_epoch into r156;
    ternary r151 r39.commission r140.commission into r157;
    ternary r151 r39.boost r140.boost into r158;
    cast r152 r153 r154 r155 r156 r157 r158 into r159 as validator_datum;
    ternary r151 r140.delegator r39.delegator into r160;
    ternary r151 r140.validator r39.validator into r161;
    ternary r151 r140.block_height r39.block_height into r162;
    ternary r151 r140.bonded_microcredits r39.bonded_microcredits into r163;
    ternary r151 r140.microcredits_yield_per_epoch r39.microcredits_yield_per_epoch into r164;
    ternary r151 r140.commission r39.commission into r165;
    ternary r151 r140.boost r39.boost into r166;
    cast r160 r161 r162 r163 r164 r165 r166 into r167 as validator_datum;
    ternary r144 r39.delegator r159.delegator into r168;
    ternary r144 r39.validator r159.validator into r169;
    ternary r144 r39.block_height r159.block_height into r170;
    ternary r144 r39.bonded_microcredits r159.bonded_microcredits into r171;
    ternary r144 r39.microcredits_yield_per_epoch r159.microcredits_yield_per_epoch into r172;
    ternary r144 r39.commission r159.commission into r173;
    ternary r144 r39.boost r159.boost into r174;
    cast r168 r169 r170 r171 r172 r173 r174 into r175 as validator_datum;
    ternary r144 r140.delegator r167.delegator into r176;
    ternary r144 r140.validator r167.validator into r177;
    ternary r144 r140.block_height r167.block_height into r178;
    ternary r144 r140.bonded_microcredits r167.bonded_microcredits into r179;
    ternary r144 r140.microcredits_yield_per_epoch r167.microcredits_yield_per_epoch into r180;
    ternary r144 r140.commission r167.commission into r181;
    ternary r144 r140.boost r167.boost into r182;
    cast r176 r177 r178 r179 r180 r181 r182 into r183 as validator_datum;
    ternary r143 r140.delegator r175.delegator into r184;
    ternary r143 r140.validator r175.validator into r185;
    ternary r143 r140.block_height r175.block_height into r186;
    ternary r143 r140.bonded_microcredits r175.bonded_microcredits into r187;
    ternary r143 r140.microcredits_yield_per_epoch r175.microcredits_yield_per_epoch into r188;
    ternary r143 r140.commission r175.commission into r189;
    ternary r143 r140.boost r175.boost into r190;
    cast r184 r185 r186 r187 r188 r189 r190 into r191 as validator_datum;
    ternary r143 r39.delegator r183.delegator into r192;
    ternary r143 r39.validator r183.validator into r193;
    ternary r143 r39.block_height r183.block_height into r194;
    ternary r143 r39.bonded_microcredits r183.bonded_microcredits into r195;
    ternary r143 r39.microcredits_yield_per_epoch r183.microcredits_yield_per_epoch into r196;
    ternary r143 r39.commission r183.commission into r197;
    ternary r143 r39.boost r183.boost into r198;
    cast r192 r193 r194 r195 r196 r197 r198 into r199 as validator_datum;
    ternary r142 r39.delegator r191.delegator into r200;
    ternary r142 r39.validator r191.validator into r201;
    ternary r142 r39.block_height r191.block_height into r202;
    ternary r142 r39.bonded_microcredits r191.bonded_microcredits into r203;
    ternary r142 r39.microcredits_yield_per_epoch r191.microcredits_yield_per_epoch into r204;
    ternary r142 r39.commission r191.commission into r205;
    ternary r142 r39.boost r191.boost into r206;
    cast r200 r201 r202 r203 r204 r205 r206 into r207 as validator_datum;
    ternary r142 r140.delegator r199.delegator into r208;
    ternary r142 r140.validator r199.validator into r209;
    ternary r142 r140.block_height r199.block_height into r210;
    ternary r142 r140.bonded_microcredits r199.bonded_microcredits into r211;
    ternary r142 r140.microcredits_yield_per_epoch r199.microcredits_yield_per_epoch into r212;
    ternary r142 r140.commission r199.commission into r213;
    ternary r142 r140.boost r199.boost into r214;
    cast r208 r209 r210 r211 r212 r213 r214 into r215 as validator_datum;
    ternary r141 r140.delegator r207.delegator into r216;
    ternary r141 r140.validator r207.validator into r217;
    ternary r141 r140.block_height r207.block_height into r218;
    ternary r141 r140.bonded_microcredits r207.bonded_microcredits into r219;
    ternary r141 r140.microcredits_yield_per_epoch r207.microcredits_yield_per_epoch into r220;
    ternary r141 r140.commission r207.commission into r221;
    ternary r141 r140.boost r207.boost into r222;
    cast r216 r217 r218 r219 r220 r221 r222 into r223 as validator_datum;
    ternary r141 r39.delegator r215.delegator into r224;
    ternary r141 r39.validator r215.validator into r225;
    ternary r141 r39.block_height r215.block_height into r226;
    ternary r141 r39.bonded_microcredits r215.bonded_microcredits into r227;
    ternary r141 r39.microcredits_yield_per_epoch r215.microcredits_yield_per_epoch into r228;
    ternary r141 r39.commission r215.commission into r229;
    ternary r141 r39.boost r215.boost into r230;
    cast r224 r225 r226 r227 r228 r229 r230 into r231 as validator_datum;
    lt r40.block_height r48 into r232;
    lt r231.block_height r48 into r233;
    is.eq r40.microcredits_yield_per_epoch 0u128 into r234;
    is.eq r231.microcredits_yield_per_epoch 0u128 into r235;
    mul r231.boost 10_000u128 into r236;
    div r236 r49[2u32] into r237;
    add r231.microcredits_yield_per_epoch r237 into r238;
    mul r40.boost 10_000u128 into r239;
    div r239 r49[2u32] into r240;
    add r40.microcredits_yield_per_epoch r240 into r241;
    lt r238 r241 into r242;
    ternary r242 r40.delegator r231.delegator into r243;
    ternary r242 r40.validator r231.validator into r244;
    ternary r242 r40.block_height r231.block_height into r245;
    ternary r242 r40.bonded_microcredits r231.bonded_microcredits into r246;
    ternary r242 r40.microcredits_yield_per_epoch r231.microcredits_yield_per_epoch into r247;
    ternary r242 r40.commission r231.commission into r248;
    ternary r242 r40.boost r231.boost into r249;
    cast r243 r244 r245 r246 r247 r248 r249 into r250 as validator_datum;
    ternary r242 r231.delegator r40.delegator into r251;
    ternary r242 r231.validator r40.validator into r252;
    ternary r242 r231.block_height r40.block_height into r253;
    ternary r242 r231.bonded_microcredits r40.bonded_microcredits into r254;
    ternary r242 r231.microcredits_yield_per_epoch r40.microcredits_yield_per_epoch into r255;
    ternary r242 r231.commission r40.commission into r256;
    ternary r242 r231.boost r40.boost into r257;
    cast r251 r252 r253 r254 r255 r256 r257 into r258 as validator_datum;
    ternary r235 r40.delegator r250.delegator into r259;
    ternary r235 r40.validator r250.validator into r260;
    ternary r235 r40.block_height r250.block_height into r261;
    ternary r235 r40.bonded_microcredits r250.bonded_microcredits into r262;
    ternary r235 r40.microcredits_yield_per_epoch r250.microcredits_yield_per_epoch into r263;
    ternary r235 r40.commission r250.commission into r264;
    ternary r235 r40.boost r250.boost into r265;
    cast r259 r260 r261 r262 r263 r264 r265 into r266 as validator_datum;
    ternary r235 r231.delegator r258.delegator into r267;
    ternary r235 r231.validator r258.validator into r268;
    ternary r235 r231.block_height r258.block_height into r269;
    ternary r235 r231.bonded_microcredits r258.bonded_microcredits into r270;
    ternary r235 r231.microcredits_yield_per_epoch r258.microcredits_yield_per_epoch into r271;
    ternary r235 r231.commission r258.commission into r272;
    ternary r235 r231.boost r258.boost into r273;
    cast r267 r268 r269 r270 r271 r272 r273 into r274 as validator_datum;
    ternary r234 r231.delegator r266.delegator into r275;
    ternary r234 r231.validator r266.validator into r276;
    ternary r234 r231.block_height r266.block_height into r277;
    ternary r234 r231.bonded_microcredits r266.bonded_microcredits into r278;
    ternary r234 r231.microcredits_yield_per_epoch r266.microcredits_yield_per_epoch into r279;
    ternary r234 r231.commission r266.commission into r280;
    ternary r234 r231.boost r266.boost into r281;
    cast r275 r276 r277 r278 r279 r280 r281 into r282 as validator_datum;
    ternary r234 r40.delegator r274.delegator into r283;
    ternary r234 r40.validator r274.validator into r284;
    ternary r234 r40.block_height r274.block_height into r285;
    ternary r234 r40.bonded_microcredits r274.bonded_microcredits into r286;
    ternary r234 r40.microcredits_yield_per_epoch r274.microcredits_yield_per_epoch into r287;
    ternary r234 r40.commission r274.commission into r288;
    ternary r234 r40.boost r274.boost into r289;
    cast r283 r284 r285 r286 r287 r288 r289 into r290 as validator_datum;
    ternary r233 r40.delegator r282.delegator into r291;
    ternary r233 r40.validator r282.validator into r292;
    ternary r233 r40.block_height r282.block_height into r293;
    ternary r233 r40.bonded_microcredits r282.bonded_microcredits into r294;
    ternary r233 r40.microcredits_yield_per_epoch r282.microcredits_yield_per_epoch into r295;
    ternary r233 r40.commission r282.commission into r296;
    ternary r233 r40.boost r282.boost into r297;
    cast r291 r292 r293 r294 r295 r296 r297 into r298 as validator_datum;
    ternary r233 r231.delegator r290.delegator into r299;
    ternary r233 r231.validator r290.validator into r300;
    ternary r233 r231.block_height r290.block_height into r301;
    ternary r233 r231.bonded_microcredits r290.bonded_microcredits into r302;
    ternary r233 r231.microcredits_yield_per_epoch r290.microcredits_yield_per_epoch into r303;
    ternary r233 r231.commission r290.commission into r304;
    ternary r233 r231.boost r290.boost into r305;
    cast r299 r300 r301 r302 r303 r304 r305 into r306 as validator_datum;
    ternary r232 r231.delegator r298.delegator into r307;
    ternary r232 r231.validator r298.validator into r308;
    ternary r232 r231.block_height r298.block_height into r309;
    ternary r232 r231.bonded_microcredits r298.bonded_microcredits into r310;
    ternary r232 r231.microcredits_yield_per_epoch r298.microcredits_yield_per_epoch into r311;
    ternary r232 r231.commission r298.commission into r312;
    ternary r232 r231.boost r298.boost into r313;
    cast r307 r308 r309 r310 r311 r312 r313 into r314 as validator_datum;
    ternary r232 r40.delegator r306.delegator into r315;
    ternary r232 r40.validator r306.validator into r316;
    ternary r232 r40.block_height r306.block_height into r317;
    ternary r232 r40.bonded_microcredits r306.bonded_microcredits into r318;
    ternary r232 r40.microcredits_yield_per_epoch r306.microcredits_yield_per_epoch into r319;
    ternary r232 r40.commission r306.commission into r320;
    ternary r232 r40.boost r306.boost into r321;
    cast r315 r316 r317 r318 r319 r320 r321 into r322 as validator_datum;
    lt r41.block_height r48 into r323;
    lt r322.block_height r48 into r324;
    is.eq r41.microcredits_yield_per_epoch 0u128 into r325;
    is.eq r322.microcredits_yield_per_epoch 0u128 into r326;
    mul r322.boost 10_000u128 into r327;
    div r327 r49[3u32] into r328;
    add r322.microcredits_yield_per_epoch r328 into r329;
    mul r41.boost 10_000u128 into r330;
    div r330 r49[3u32] into r331;
    add r41.microcredits_yield_per_epoch r331 into r332;
    lt r329 r332 into r333;
    ternary r333 r41.delegator r322.delegator into r334;
    ternary r333 r41.validator r322.validator into r335;
    ternary r333 r41.block_height r322.block_height into r336;
    ternary r333 r41.bonded_microcredits r322.bonded_microcredits into r337;
    ternary r333 r41.microcredits_yield_per_epoch r322.microcredits_yield_per_epoch into r338;
    ternary r333 r41.commission r322.commission into r339;
    ternary r333 r41.boost r322.boost into r340;
    cast r334 r335 r336 r337 r338 r339 r340 into r341 as validator_datum;
    ternary r333 r322.delegator r41.delegator into r342;
    ternary r333 r322.validator r41.validator into r343;
    ternary r333 r322.block_height r41.block_height into r344;
    ternary r333 r322.bonded_microcredits r41.bonded_microcredits into r345;
    ternary r333 r322.microcredits_yield_per_epoch r41.microcredits_yield_per_epoch into r346;
    ternary r333 r322.commission r41.commission into r347;
    ternary r333 r322.boost r41.boost into r348;
    cast r342 r343 r344 r345 r346 r347 r348 into r349 as validator_datum;
    ternary r326 r41.delegator r341.delegator into r350;
    ternary r326 r41.validator r341.validator into r351;
    ternary r326 r41.block_height r341.block_height into r352;
    ternary r326 r41.bonded_microcredits r341.bonded_microcredits into r353;
    ternary r326 r41.microcredits_yield_per_epoch r341.microcredits_yield_per_epoch into r354;
    ternary r326 r41.commission r341.commission into r355;
    ternary r326 r41.boost r341.boost into r356;
    cast r350 r351 r352 r353 r354 r355 r356 into r357 as validator_datum;
    ternary r326 r322.delegator r349.delegator into r358;
    ternary r326 r322.validator r349.validator into r359;
    ternary r326 r322.block_height r349.block_height into r360;
    ternary r326 r322.bonded_microcredits r349.bonded_microcredits into r361;
    ternary r326 r322.microcredits_yield_per_epoch r349.microcredits_yield_per_epoch into r362;
    ternary r326 r322.commission r349.commission into r363;
    ternary r326 r322.boost r349.boost into r364;
    cast r358 r359 r360 r361 r362 r363 r364 into r365 as validator_datum;
    ternary r325 r322.delegator r357.delegator into r366;
    ternary r325 r322.validator r357.validator into r367;
    ternary r325 r322.block_height r357.block_height into r368;
    ternary r325 r322.bonded_microcredits r357.bonded_microcredits into r369;
    ternary r325 r322.microcredits_yield_per_epoch r357.microcredits_yield_per_epoch into r370;
    ternary r325 r322.commission r357.commission into r371;
    ternary r325 r322.boost r357.boost into r372;
    cast r366 r367 r368 r369 r370 r371 r372 into r373 as validator_datum;
    ternary r325 r41.delegator r365.delegator into r374;
    ternary r325 r41.validator r365.validator into r375;
    ternary r325 r41.block_height r365.block_height into r376;
    ternary r325 r41.bonded_microcredits r365.bonded_microcredits into r377;
    ternary r325 r41.microcredits_yield_per_epoch r365.microcredits_yield_per_epoch into r378;
    ternary r325 r41.commission r365.commission into r379;
    ternary r325 r41.boost r365.boost into r380;
    cast r374 r375 r376 r377 r378 r379 r380 into r381 as validator_datum;
    ternary r324 r41.delegator r373.delegator into r382;
    ternary r324 r41.validator r373.validator into r383;
    ternary r324 r41.block_height r373.block_height into r384;
    ternary r324 r41.bonded_microcredits r373.bonded_microcredits into r385;
    ternary r324 r41.microcredits_yield_per_epoch r373.microcredits_yield_per_epoch into r386;
    ternary r324 r41.commission r373.commission into r387;
    ternary r324 r41.boost r373.boost into r388;
    cast r382 r383 r384 r385 r386 r387 r388 into r389 as validator_datum;
    ternary r324 r322.delegator r381.delegator into r390;
    ternary r324 r322.validator r381.validator into r391;
    ternary r324 r322.block_height r381.block_height into r392;
    ternary r324 r322.bonded_microcredits r381.bonded_microcredits into r393;
    ternary r324 r322.microcredits_yield_per_epoch r381.microcredits_yield_per_epoch into r394;
    ternary r324 r322.commission r381.commission into r395;
    ternary r324 r322.boost r381.boost into r396;
    cast r390 r391 r392 r393 r394 r395 r396 into r397 as validator_datum;
    ternary r323 r322.delegator r389.delegator into r398;
    ternary r323 r322.validator r389.validator into r399;
    ternary r323 r322.block_height r389.block_height into r400;
    ternary r323 r322.bonded_microcredits r389.bonded_microcredits into r401;
    ternary r323 r322.microcredits_yield_per_epoch r389.microcredits_yield_per_epoch into r402;
    ternary r323 r322.commission r389.commission into r403;
    ternary r323 r322.boost r389.boost into r404;
    cast r398 r399 r400 r401 r402 r403 r404 into r405 as validator_datum;
    ternary r323 r41.delegator r397.delegator into r406;
    ternary r323 r41.validator r397.validator into r407;
    ternary r323 r41.block_height r397.block_height into r408;
    ternary r323 r41.bonded_microcredits r397.bonded_microcredits into r409;
    ternary r323 r41.microcredits_yield_per_epoch r397.microcredits_yield_per_epoch into r410;
    ternary r323 r41.commission r397.commission into r411;
    ternary r323 r41.boost r397.boost into r412;
    cast r406 r407 r408 r409 r410 r411 r412 into r413 as validator_datum;
    lt r42.block_height r48 into r414;
    lt r413.block_height r48 into r415;
    is.eq r42.microcredits_yield_per_epoch 0u128 into r416;
    is.eq r413.microcredits_yield_per_epoch 0u128 into r417;
    mul r413.boost 10_000u128 into r418;
    div r418 r49[4u32] into r419;
    add r413.microcredits_yield_per_epoch r419 into r420;
    mul r42.boost 10_000u128 into r421;
    div r421 r49[4u32] into r422;
    add r42.microcredits_yield_per_epoch r422 into r423;
    lt r420 r423 into r424;
    ternary r424 r42.delegator r413.delegator into r425;
    ternary r424 r42.validator r413.validator into r426;
    ternary r424 r42.block_height r413.block_height into r427;
    ternary r424 r42.bonded_microcredits r413.bonded_microcredits into r428;
    ternary r424 r42.microcredits_yield_per_epoch r413.microcredits_yield_per_epoch into r429;
    ternary r424 r42.commission r413.commission into r430;
    ternary r424 r42.boost r413.boost into r431;
    cast r425 r426 r427 r428 r429 r430 r431 into r432 as validator_datum;
    ternary r424 r413.delegator r42.delegator into r433;
    ternary r424 r413.validator r42.validator into r434;
    ternary r424 r413.block_height r42.block_height into r435;
    ternary r424 r413.bonded_microcredits r42.bonded_microcredits into r436;
    ternary r424 r413.microcredits_yield_per_epoch r42.microcredits_yield_per_epoch into r437;
    ternary r424 r413.commission r42.commission into r438;
    ternary r424 r413.boost r42.boost into r439;
    cast r433 r434 r435 r436 r437 r438 r439 into r440 as validator_datum;
    ternary r417 r42.delegator r432.delegator into r441;
    ternary r417 r42.validator r432.validator into r442;
    ternary r417 r42.block_height r432.block_height into r443;
    ternary r417 r42.bonded_microcredits r432.bonded_microcredits into r444;
    ternary r417 r42.microcredits_yield_per_epoch r432.microcredits_yield_per_epoch into r445;
    ternary r417 r42.commission r432.commission into r446;
    ternary r417 r42.boost r432.boost into r447;
    cast r441 r442 r443 r444 r445 r446 r447 into r448 as validator_datum;
    ternary r417 r413.delegator r440.delegator into r449;
    ternary r417 r413.validator r440.validator into r450;
    ternary r417 r413.block_height r440.block_height into r451;
    ternary r417 r413.bonded_microcredits r440.bonded_microcredits into r452;
    ternary r417 r413.microcredits_yield_per_epoch r440.microcredits_yield_per_epoch into r453;
    ternary r417 r413.commission r440.commission into r454;
    ternary r417 r413.boost r440.boost into r455;
    cast r449 r450 r451 r452 r453 r454 r455 into r456 as validator_datum;
    ternary r416 r413.delegator r448.delegator into r457;
    ternary r416 r413.validator r448.validator into r458;
    ternary r416 r413.block_height r448.block_height into r459;
    ternary r416 r413.bonded_microcredits r448.bonded_microcredits into r460;
    ternary r416 r413.microcredits_yield_per_epoch r448.microcredits_yield_per_epoch into r461;
    ternary r416 r413.commission r448.commission into r462;
    ternary r416 r413.boost r448.boost into r463;
    cast r457 r458 r459 r460 r461 r462 r463 into r464 as validator_datum;
    ternary r416 r42.delegator r456.delegator into r465;
    ternary r416 r42.validator r456.validator into r466;
    ternary r416 r42.block_height r456.block_height into r467;
    ternary r416 r42.bonded_microcredits r456.bonded_microcredits into r468;
    ternary r416 r42.microcredits_yield_per_epoch r456.microcredits_yield_per_epoch into r469;
    ternary r416 r42.commission r456.commission into r470;
    ternary r416 r42.boost r456.boost into r471;
    cast r465 r466 r467 r468 r469 r470 r471 into r472 as validator_datum;
    ternary r415 r42.delegator r464.delegator into r473;
    ternary r415 r42.validator r464.validator into r474;
    ternary r415 r42.block_height r464.block_height into r475;
    ternary r415 r42.bonded_microcredits r464.bonded_microcredits into r476;
    ternary r415 r42.microcredits_yield_per_epoch r464.microcredits_yield_per_epoch into r477;
    ternary r415 r42.commission r464.commission into r478;
    ternary r415 r42.boost r464.boost into r479;
    cast r473 r474 r475 r476 r477 r478 r479 into r480 as validator_datum;
    ternary r415 r413.delegator r472.delegator into r481;
    ternary r415 r413.validator r472.validator into r482;
    ternary r415 r413.block_height r472.block_height into r483;
    ternary r415 r413.bonded_microcredits r472.bonded_microcredits into r484;
    ternary r415 r413.microcredits_yield_per_epoch r472.microcredits_yield_per_epoch into r485;
    ternary r415 r413.commission r472.commission into r486;
    ternary r415 r413.boost r472.boost into r487;
    cast r481 r482 r483 r484 r485 r486 r487 into r488 as validator_datum;
    ternary r414 r413.delegator r480.delegator into r489;
    ternary r414 r413.validator r480.validator into r490;
    ternary r414 r413.block_height r480.block_height into r491;
    ternary r414 r413.bonded_microcredits r480.bonded_microcredits into r492;
    ternary r414 r413.microcredits_yield_per_epoch r480.microcredits_yield_per_epoch into r493;
    ternary r414 r413.commission r480.commission into r494;
    ternary r414 r413.boost r480.boost into r495;
    cast r489 r490 r491 r492 r493 r494 r495 into r496 as validator_datum;
    ternary r414 r42.delegator r488.delegator into r497;
    ternary r414 r42.validator r488.validator into r498;
    ternary r414 r42.block_height r488.block_height into r499;
    ternary r414 r42.bonded_microcredits r488.bonded_microcredits into r500;
    ternary r414 r42.microcredits_yield_per_epoch r488.microcredits_yield_per_epoch into r501;
    ternary r414 r42.commission r488.commission into r502;
    ternary r414 r42.boost r488.boost into r503;
    cast r497 r498 r499 r500 r501 r502 r503 into r504 as validator_datum;
    lt r43.block_height r48 into r505;
    lt r504.block_height r48 into r506;
    is.eq r43.microcredits_yield_per_epoch 0u128 into r507;
    is.eq r504.microcredits_yield_per_epoch 0u128 into r508;
    mul r504.boost 10_000u128 into r509;
    div r509 r49[5u32] into r510;
    add r504.microcredits_yield_per_epoch r510 into r511;
    mul r43.boost 10_000u128 into r512;
    div r512 r49[5u32] into r513;
    add r43.microcredits_yield_per_epoch r513 into r514;
    lt r511 r514 into r515;
    ternary r515 r43.delegator r504.delegator into r516;
    ternary r515 r43.validator r504.validator into r517;
    ternary r515 r43.block_height r504.block_height into r518;
    ternary r515 r43.bonded_microcredits r504.bonded_microcredits into r519;
    ternary r515 r43.microcredits_yield_per_epoch r504.microcredits_yield_per_epoch into r520;
    ternary r515 r43.commission r504.commission into r521;
    ternary r515 r43.boost r504.boost into r522;
    cast r516 r517 r518 r519 r520 r521 r522 into r523 as validator_datum;
    ternary r515 r504.delegator r43.delegator into r524;
    ternary r515 r504.validator r43.validator into r525;
    ternary r515 r504.block_height r43.block_height into r526;
    ternary r515 r504.bonded_microcredits r43.bonded_microcredits into r527;
    ternary r515 r504.microcredits_yield_per_epoch r43.microcredits_yield_per_epoch into r528;
    ternary r515 r504.commission r43.commission into r529;
    ternary r515 r504.boost r43.boost into r530;
    cast r524 r525 r526 r527 r528 r529 r530 into r531 as validator_datum;
    ternary r508 r43.delegator r523.delegator into r532;
    ternary r508 r43.validator r523.validator into r533;
    ternary r508 r43.block_height r523.block_height into r534;
    ternary r508 r43.bonded_microcredits r523.bonded_microcredits into r535;
    ternary r508 r43.microcredits_yield_per_epoch r523.microcredits_yield_per_epoch into r536;
    ternary r508 r43.commission r523.commission into r537;
    ternary r508 r43.boost r523.boost into r538;
    cast r532 r533 r534 r535 r536 r537 r538 into r539 as validator_datum;
    ternary r508 r504.delegator r531.delegator into r540;
    ternary r508 r504.validator r531.validator into r541;
    ternary r508 r504.block_height r531.block_height into r542;
    ternary r508 r504.bonded_microcredits r531.bonded_microcredits into r543;
    ternary r508 r504.microcredits_yield_per_epoch r531.microcredits_yield_per_epoch into r544;
    ternary r508 r504.commission r531.commission into r545;
    ternary r508 r504.boost r531.boost into r546;
    cast r540 r541 r542 r543 r544 r545 r546 into r547 as validator_datum;
    ternary r507 r504.delegator r539.delegator into r548;
    ternary r507 r504.validator r539.validator into r549;
    ternary r507 r504.block_height r539.block_height into r550;
    ternary r507 r504.bonded_microcredits r539.bonded_microcredits into r551;
    ternary r507 r504.microcredits_yield_per_epoch r539.microcredits_yield_per_epoch into r552;
    ternary r507 r504.commission r539.commission into r553;
    ternary r507 r504.boost r539.boost into r554;
    cast r548 r549 r550 r551 r552 r553 r554 into r555 as validator_datum;
    ternary r507 r43.delegator r547.delegator into r556;
    ternary r507 r43.validator r547.validator into r557;
    ternary r507 r43.block_height r547.block_height into r558;
    ternary r507 r43.bonded_microcredits r547.bonded_microcredits into r559;
    ternary r507 r43.microcredits_yield_per_epoch r547.microcredits_yield_per_epoch into r560;
    ternary r507 r43.commission r547.commission into r561;
    ternary r507 r43.boost r547.boost into r562;
    cast r556 r557 r558 r559 r560 r561 r562 into r563 as validator_datum;
    ternary r506 r43.delegator r555.delegator into r564;
    ternary r506 r43.validator r555.validator into r565;
    ternary r506 r43.block_height r555.block_height into r566;
    ternary r506 r43.bonded_microcredits r555.bonded_microcredits into r567;
    ternary r506 r43.microcredits_yield_per_epoch r555.microcredits_yield_per_epoch into r568;
    ternary r506 r43.commission r555.commission into r569;
    ternary r506 r43.boost r555.boost into r570;
    cast r564 r565 r566 r567 r568 r569 r570 into r571 as validator_datum;
    ternary r506 r504.delegator r563.delegator into r572;
    ternary r506 r504.validator r563.validator into r573;
    ternary r506 r504.block_height r563.block_height into r574;
    ternary r506 r504.bonded_microcredits r563.bonded_microcredits into r575;
    ternary r506 r504.microcredits_yield_per_epoch r563.microcredits_yield_per_epoch into r576;
    ternary r506 r504.commission r563.commission into r577;
    ternary r506 r504.boost r563.boost into r578;
    cast r572 r573 r574 r575 r576 r577 r578 into r579 as validator_datum;
    ternary r505 r504.delegator r571.delegator into r580;
    ternary r505 r504.validator r571.validator into r581;
    ternary r505 r504.block_height r571.block_height into r582;
    ternary r505 r504.bonded_microcredits r571.bonded_microcredits into r583;
    ternary r505 r504.microcredits_yield_per_epoch r571.microcredits_yield_per_epoch into r584;
    ternary r505 r504.commission r571.commission into r585;
    ternary r505 r504.boost r571.boost into r586;
    cast r580 r581 r582 r583 r584 r585 r586 into r587 as validator_datum;
    ternary r505 r43.delegator r579.delegator into r588;
    ternary r505 r43.validator r579.validator into r589;
    ternary r505 r43.block_height r579.block_height into r590;
    ternary r505 r43.bonded_microcredits r579.bonded_microcredits into r591;
    ternary r505 r43.microcredits_yield_per_epoch r579.microcredits_yield_per_epoch into r592;
    ternary r505 r43.commission r579.commission into r593;
    ternary r505 r43.boost r579.boost into r594;
    cast r588 r589 r590 r591 r592 r593 r594 into r595 as validator_datum;
    lt r44.block_height r48 into r596;
    lt r595.block_height r48 into r597;
    is.eq r44.microcredits_yield_per_epoch 0u128 into r598;
    is.eq r595.microcredits_yield_per_epoch 0u128 into r599;
    mul r595.boost 10_000u128 into r600;
    div r600 r49[6u32] into r601;
    add r595.microcredits_yield_per_epoch r601 into r602;
    mul r44.boost 10_000u128 into r603;
    div r603 r49[6u32] into r604;
    add r44.microcredits_yield_per_epoch r604 into r605;
    lt r602 r605 into r606;
    ternary r606 r44.delegator r595.delegator into r607;
    ternary r606 r44.validator r595.validator into r608;
    ternary r606 r44.block_height r595.block_height into r609;
    ternary r606 r44.bonded_microcredits r595.bonded_microcredits into r610;
    ternary r606 r44.microcredits_yield_per_epoch r595.microcredits_yield_per_epoch into r611;
    ternary r606 r44.commission r595.commission into r612;
    ternary r606 r44.boost r595.boost into r613;
    cast r607 r608 r609 r610 r611 r612 r613 into r614 as validator_datum;
    ternary r606 r595.delegator r44.delegator into r615;
    ternary r606 r595.validator r44.validator into r616;
    ternary r606 r595.block_height r44.block_height into r617;
    ternary r606 r595.bonded_microcredits r44.bonded_microcredits into r618;
    ternary r606 r595.microcredits_yield_per_epoch r44.microcredits_yield_per_epoch into r619;
    ternary r606 r595.commission r44.commission into r620;
    ternary r606 r595.boost r44.boost into r621;
    cast r615 r616 r617 r618 r619 r620 r621 into r622 as validator_datum;
    ternary r599 r44.delegator r614.delegator into r623;
    ternary r599 r44.validator r614.validator into r624;
    ternary r599 r44.block_height r614.block_height into r625;
    ternary r599 r44.bonded_microcredits r614.bonded_microcredits into r626;
    ternary r599 r44.microcredits_yield_per_epoch r614.microcredits_yield_per_epoch into r627;
    ternary r599 r44.commission r614.commission into r628;
    ternary r599 r44.boost r614.boost into r629;
    cast r623 r624 r625 r626 r627 r628 r629 into r630 as validator_datum;
    ternary r599 r595.delegator r622.delegator into r631;
    ternary r599 r595.validator r622.validator into r632;
    ternary r599 r595.block_height r622.block_height into r633;
    ternary r599 r595.bonded_microcredits r622.bonded_microcredits into r634;
    ternary r599 r595.microcredits_yield_per_epoch r622.microcredits_yield_per_epoch into r635;
    ternary r599 r595.commission r622.commission into r636;
    ternary r599 r595.boost r622.boost into r637;
    cast r631 r632 r633 r634 r635 r636 r637 into r638 as validator_datum;
    ternary r598 r595.delegator r630.delegator into r639;
    ternary r598 r595.validator r630.validator into r640;
    ternary r598 r595.block_height r630.block_height into r641;
    ternary r598 r595.bonded_microcredits r630.bonded_microcredits into r642;
    ternary r598 r595.microcredits_yield_per_epoch r630.microcredits_yield_per_epoch into r643;
    ternary r598 r595.commission r630.commission into r644;
    ternary r598 r595.boost r630.boost into r645;
    cast r639 r640 r641 r642 r643 r644 r645 into r646 as validator_datum;
    ternary r598 r44.delegator r638.delegator into r647;
    ternary r598 r44.validator r638.validator into r648;
    ternary r598 r44.block_height r638.block_height into r649;
    ternary r598 r44.bonded_microcredits r638.bonded_microcredits into r650;
    ternary r598 r44.microcredits_yield_per_epoch r638.microcredits_yield_per_epoch into r651;
    ternary r598 r44.commission r638.commission into r652;
    ternary r598 r44.boost r638.boost into r653;
    cast r647 r648 r649 r650 r651 r652 r653 into r654 as validator_datum;
    ternary r597 r44.delegator r646.delegator into r655;
    ternary r597 r44.validator r646.validator into r656;
    ternary r597 r44.block_height r646.block_height into r657;
    ternary r597 r44.bonded_microcredits r646.bonded_microcredits into r658;
    ternary r597 r44.microcredits_yield_per_epoch r646.microcredits_yield_per_epoch into r659;
    ternary r597 r44.commission r646.commission into r660;
    ternary r597 r44.boost r646.boost into r661;
    cast r655 r656 r657 r658 r659 r660 r661 into r662 as validator_datum;
    ternary r597 r595.delegator r654.delegator into r663;
    ternary r597 r595.validator r654.validator into r664;
    ternary r597 r595.block_height r654.block_height into r665;
    ternary r597 r595.bonded_microcredits r654.bonded_microcredits into r666;
    ternary r597 r595.microcredits_yield_per_epoch r654.microcredits_yield_per_epoch into r667;
    ternary r597 r595.commission r654.commission into r668;
    ternary r597 r595.boost r654.boost into r669;
    cast r663 r664 r665 r666 r667 r668 r669 into r670 as validator_datum;
    ternary r596 r595.delegator r662.delegator into r671;
    ternary r596 r595.validator r662.validator into r672;
    ternary r596 r595.block_height r662.block_height into r673;
    ternary r596 r595.bonded_microcredits r662.bonded_microcredits into r674;
    ternary r596 r595.microcredits_yield_per_epoch r662.microcredits_yield_per_epoch into r675;
    ternary r596 r595.commission r662.commission into r676;
    ternary r596 r595.boost r662.boost into r677;
    cast r671 r672 r673 r674 r675 r676 r677 into r678 as validator_datum;
    ternary r596 r44.delegator r670.delegator into r679;
    ternary r596 r44.validator r670.validator into r680;
    ternary r596 r44.block_height r670.block_height into r681;
    ternary r596 r44.bonded_microcredits r670.bonded_microcredits into r682;
    ternary r596 r44.microcredits_yield_per_epoch r670.microcredits_yield_per_epoch into r683;
    ternary r596 r44.commission r670.commission into r684;
    ternary r596 r44.boost r670.boost into r685;
    cast r679 r680 r681 r682 r683 r684 r685 into r686 as validator_datum;
    lt r45.block_height r48 into r687;
    lt r686.block_height r48 into r688;
    is.eq r45.microcredits_yield_per_epoch 0u128 into r689;
    is.eq r686.microcredits_yield_per_epoch 0u128 into r690;
    mul r686.boost 10_000u128 into r691;
    div r691 r49[7u32] into r692;
    add r686.microcredits_yield_per_epoch r692 into r693;
    mul r45.boost 10_000u128 into r694;
    div r694 r49[7u32] into r695;
    add r45.microcredits_yield_per_epoch r695 into r696;
    lt r693 r696 into r697;
    ternary r697 r45.delegator r686.delegator into r698;
    ternary r697 r45.validator r686.validator into r699;
    ternary r697 r45.block_height r686.block_height into r700;
    ternary r697 r45.bonded_microcredits r686.bonded_microcredits into r701;
    ternary r697 r45.microcredits_yield_per_epoch r686.microcredits_yield_per_epoch into r702;
    ternary r697 r45.commission r686.commission into r703;
    ternary r697 r45.boost r686.boost into r704;
    cast r698 r699 r700 r701 r702 r703 r704 into r705 as validator_datum;
    ternary r697 r686.delegator r45.delegator into r706;
    ternary r697 r686.validator r45.validator into r707;
    ternary r697 r686.block_height r45.block_height into r708;
    ternary r697 r686.bonded_microcredits r45.bonded_microcredits into r709;
    ternary r697 r686.microcredits_yield_per_epoch r45.microcredits_yield_per_epoch into r710;
    ternary r697 r686.commission r45.commission into r711;
    ternary r697 r686.boost r45.boost into r712;
    cast r706 r707 r708 r709 r710 r711 r712 into r713 as validator_datum;
    ternary r690 r45.delegator r705.delegator into r714;
    ternary r690 r45.validator r705.validator into r715;
    ternary r690 r45.block_height r705.block_height into r716;
    ternary r690 r45.bonded_microcredits r705.bonded_microcredits into r717;
    ternary r690 r45.microcredits_yield_per_epoch r705.microcredits_yield_per_epoch into r718;
    ternary r690 r45.commission r705.commission into r719;
    ternary r690 r45.boost r705.boost into r720;
    cast r714 r715 r716 r717 r718 r719 r720 into r721 as validator_datum;
    ternary r690 r686.delegator r713.delegator into r722;
    ternary r690 r686.validator r713.validator into r723;
    ternary r690 r686.block_height r713.block_height into r724;
    ternary r690 r686.bonded_microcredits r713.bonded_microcredits into r725;
    ternary r690 r686.microcredits_yield_per_epoch r713.microcredits_yield_per_epoch into r726;
    ternary r690 r686.commission r713.commission into r727;
    ternary r690 r686.boost r713.boost into r728;
    cast r722 r723 r724 r725 r726 r727 r728 into r729 as validator_datum;
    ternary r689 r686.delegator r721.delegator into r730;
    ternary r689 r686.validator r721.validator into r731;
    ternary r689 r686.block_height r721.block_height into r732;
    ternary r689 r686.bonded_microcredits r721.bonded_microcredits into r733;
    ternary r689 r686.microcredits_yield_per_epoch r721.microcredits_yield_per_epoch into r734;
    ternary r689 r686.commission r721.commission into r735;
    ternary r689 r686.boost r721.boost into r736;
    cast r730 r731 r732 r733 r734 r735 r736 into r737 as validator_datum;
    ternary r689 r45.delegator r729.delegator into r738;
    ternary r689 r45.validator r729.validator into r739;
    ternary r689 r45.block_height r729.block_height into r740;
    ternary r689 r45.bonded_microcredits r729.bonded_microcredits into r741;
    ternary r689 r45.microcredits_yield_per_epoch r729.microcredits_yield_per_epoch into r742;
    ternary r689 r45.commission r729.commission into r743;
    ternary r689 r45.boost r729.boost into r744;
    cast r738 r739 r740 r741 r742 r743 r744 into r745 as validator_datum;
    ternary r688 r45.delegator r737.delegator into r746;
    ternary r688 r45.validator r737.validator into r747;
    ternary r688 r45.block_height r737.block_height into r748;
    ternary r688 r45.bonded_microcredits r737.bonded_microcredits into r749;
    ternary r688 r45.microcredits_yield_per_epoch r737.microcredits_yield_per_epoch into r750;
    ternary r688 r45.commission r737.commission into r751;
    ternary r688 r45.boost r737.boost into r752;
    cast r746 r747 r748 r749 r750 r751 r752 into r753 as validator_datum;
    ternary r688 r686.delegator r745.delegator into r754;
    ternary r688 r686.validator r745.validator into r755;
    ternary r688 r686.block_height r745.block_height into r756;
    ternary r688 r686.bonded_microcredits r745.bonded_microcredits into r757;
    ternary r688 r686.microcredits_yield_per_epoch r745.microcredits_yield_per_epoch into r758;
    ternary r688 r686.commission r745.commission into r759;
    ternary r688 r686.boost r745.boost into r760;
    cast r754 r755 r756 r757 r758 r759 r760 into r761 as validator_datum;
    ternary r687 r686.delegator r753.delegator into r762;
    ternary r687 r686.validator r753.validator into r763;
    ternary r687 r686.block_height r753.block_height into r764;
    ternary r687 r686.bonded_microcredits r753.bonded_microcredits into r765;
    ternary r687 r686.microcredits_yield_per_epoch r753.microcredits_yield_per_epoch into r766;
    ternary r687 r686.commission r753.commission into r767;
    ternary r687 r686.boost r753.boost into r768;
    cast r762 r763 r764 r765 r766 r767 r768 into r769 as validator_datum;
    ternary r687 r45.delegator r761.delegator into r770;
    ternary r687 r45.validator r761.validator into r771;
    ternary r687 r45.block_height r761.block_height into r772;
    ternary r687 r45.bonded_microcredits r761.bonded_microcredits into r773;
    ternary r687 r45.microcredits_yield_per_epoch r761.microcredits_yield_per_epoch into r774;
    ternary r687 r45.commission r761.commission into r775;
    ternary r687 r45.boost r761.boost into r776;
    cast r770 r771 r772 r773 r774 r775 r776 into r777 as validator_datum;
    lt r46.block_height r48 into r778;
    lt r777.block_height r48 into r779;
    is.eq r46.microcredits_yield_per_epoch 0u128 into r780;
    is.eq r777.microcredits_yield_per_epoch 0u128 into r781;
    mul r777.boost 10_000u128 into r782;
    div r782 r49[8u32] into r783;
    add r777.microcredits_yield_per_epoch r783 into r784;
    mul r46.boost 10_000u128 into r785;
    div r785 r49[8u32] into r786;
    add r46.microcredits_yield_per_epoch r786 into r787;
    lt r784 r787 into r788;
    ternary r788 r46.delegator r777.delegator into r789;
    ternary r788 r46.validator r777.validator into r790;
    ternary r788 r46.block_height r777.block_height into r791;
    ternary r788 r46.bonded_microcredits r777.bonded_microcredits into r792;
    ternary r788 r46.microcredits_yield_per_epoch r777.microcredits_yield_per_epoch into r793;
    ternary r788 r46.commission r777.commission into r794;
    ternary r788 r46.boost r777.boost into r795;
    cast r789 r790 r791 r792 r793 r794 r795 into r796 as validator_datum;
    ternary r788 r777.delegator r46.delegator into r797;
    ternary r788 r777.validator r46.validator into r798;
    ternary r788 r777.block_height r46.block_height into r799;
    ternary r788 r777.bonded_microcredits r46.bonded_microcredits into r800;
    ternary r788 r777.microcredits_yield_per_epoch r46.microcredits_yield_per_epoch into r801;
    ternary r788 r777.commission r46.commission into r802;
    ternary r788 r777.boost r46.boost into r803;
    cast r797 r798 r799 r800 r801 r802 r803 into r804 as validator_datum;
    ternary r781 r46.delegator r796.delegator into r805;
    ternary r781 r46.validator r796.validator into r806;
    ternary r781 r46.block_height r796.block_height into r807;
    ternary r781 r46.bonded_microcredits r796.bonded_microcredits into r808;
    ternary r781 r46.microcredits_yield_per_epoch r796.microcredits_yield_per_epoch into r809;
    ternary r781 r46.commission r796.commission into r810;
    ternary r781 r46.boost r796.boost into r811;
    cast r805 r806 r807 r808 r809 r810 r811 into r812 as validator_datum;
    ternary r781 r777.delegator r804.delegator into r813;
    ternary r781 r777.validator r804.validator into r814;
    ternary r781 r777.block_height r804.block_height into r815;
    ternary r781 r777.bonded_microcredits r804.bonded_microcredits into r816;
    ternary r781 r777.microcredits_yield_per_epoch r804.microcredits_yield_per_epoch into r817;
    ternary r781 r777.commission r804.commission into r818;
    ternary r781 r777.boost r804.boost into r819;
    cast r813 r814 r815 r816 r817 r818 r819 into r820 as validator_datum;
    ternary r780 r777.delegator r812.delegator into r821;
    ternary r780 r777.validator r812.validator into r822;
    ternary r780 r777.block_height r812.block_height into r823;
    ternary r780 r777.bonded_microcredits r812.bonded_microcredits into r824;
    ternary r780 r777.microcredits_yield_per_epoch r812.microcredits_yield_per_epoch into r825;
    ternary r780 r777.commission r812.commission into r826;
    ternary r780 r777.boost r812.boost into r827;
    cast r821 r822 r823 r824 r825 r826 r827 into r828 as validator_datum;
    ternary r780 r46.delegator r820.delegator into r829;
    ternary r780 r46.validator r820.validator into r830;
    ternary r780 r46.block_height r820.block_height into r831;
    ternary r780 r46.bonded_microcredits r820.bonded_microcredits into r832;
    ternary r780 r46.microcredits_yield_per_epoch r820.microcredits_yield_per_epoch into r833;
    ternary r780 r46.commission r820.commission into r834;
    ternary r780 r46.boost r820.boost into r835;
    cast r829 r830 r831 r832 r833 r834 r835 into r836 as validator_datum;
    ternary r779 r46.delegator r828.delegator into r837;
    ternary r779 r46.validator r828.validator into r838;
    ternary r779 r46.block_height r828.block_height into r839;
    ternary r779 r46.bonded_microcredits r828.bonded_microcredits into r840;
    ternary r779 r46.microcredits_yield_per_epoch r828.microcredits_yield_per_epoch into r841;
    ternary r779 r46.commission r828.commission into r842;
    ternary r779 r46.boost r828.boost into r843;
    cast r837 r838 r839 r840 r841 r842 r843 into r844 as validator_datum;
    ternary r779 r777.delegator r836.delegator into r845;
    ternary r779 r777.validator r836.validator into r846;
    ternary r779 r777.block_height r836.block_height into r847;
    ternary r779 r777.bonded_microcredits r836.bonded_microcredits into r848;
    ternary r779 r777.microcredits_yield_per_epoch r836.microcredits_yield_per_epoch into r849;
    ternary r779 r777.commission r836.commission into r850;
    ternary r779 r777.boost r836.boost into r851;
    cast r845 r846 r847 r848 r849 r850 r851 into r852 as validator_datum;
    ternary r778 r777.delegator r844.delegator into r853;
    ternary r778 r777.validator r844.validator into r854;
    ternary r778 r777.block_height r844.block_height into r855;
    ternary r778 r777.bonded_microcredits r844.bonded_microcredits into r856;
    ternary r778 r777.microcredits_yield_per_epoch r844.microcredits_yield_per_epoch into r857;
    ternary r778 r777.commission r844.commission into r858;
    ternary r778 r777.boost r844.boost into r859;
    cast r853 r854 r855 r856 r857 r858 r859 into r860 as validator_datum;
    ternary r778 r46.delegator r852.delegator into r861;
    ternary r778 r46.validator r852.validator into r862;
    ternary r778 r46.block_height r852.block_height into r863;
    ternary r778 r46.bonded_microcredits r852.bonded_microcredits into r864;
    ternary r778 r46.microcredits_yield_per_epoch r852.microcredits_yield_per_epoch into r865;
    ternary r778 r46.commission r852.commission into r866;
    ternary r778 r46.boost r852.boost into r867;
    cast r861 r862 r863 r864 r865 r866 r867 into r868 as validator_datum;
    lt r47.block_height r48 into r869;
    lt r868.block_height r48 into r870;
    is.eq r47.microcredits_yield_per_epoch 0u128 into r871;
    is.eq r868.microcredits_yield_per_epoch 0u128 into r872;
    mul r868.boost 10_000u128 into r873;
    div r873 r49[9u32] into r874;
    add r868.microcredits_yield_per_epoch r874 into r875;
    mul r47.boost 10_000u128 into r876;
    div r876 r49[9u32] into r877;
    add r47.microcredits_yield_per_epoch r877 into r878;
    lt r875 r878 into r879;
    ternary r879 r47.delegator r868.delegator into r880;
    ternary r879 r47.validator r868.validator into r881;
    ternary r879 r47.block_height r868.block_height into r882;
    ternary r879 r47.bonded_microcredits r868.bonded_microcredits into r883;
    ternary r879 r47.microcredits_yield_per_epoch r868.microcredits_yield_per_epoch into r884;
    ternary r879 r47.commission r868.commission into r885;
    ternary r879 r47.boost r868.boost into r886;
    cast r880 r881 r882 r883 r884 r885 r886 into r887 as validator_datum;
    ternary r879 r868.delegator r47.delegator into r888;
    ternary r879 r868.validator r47.validator into r889;
    ternary r879 r868.block_height r47.block_height into r890;
    ternary r879 r868.bonded_microcredits r47.bonded_microcredits into r891;
    ternary r879 r868.microcredits_yield_per_epoch r47.microcredits_yield_per_epoch into r892;
    ternary r879 r868.commission r47.commission into r893;
    ternary r879 r868.boost r47.boost into r894;
    cast r888 r889 r890 r891 r892 r893 r894 into r895 as validator_datum;
    ternary r872 r47.delegator r887.delegator into r896;
    ternary r872 r47.validator r887.validator into r897;
    ternary r872 r47.block_height r887.block_height into r898;
    ternary r872 r47.bonded_microcredits r887.bonded_microcredits into r899;
    ternary r872 r47.microcredits_yield_per_epoch r887.microcredits_yield_per_epoch into r900;
    ternary r872 r47.commission r887.commission into r901;
    ternary r872 r47.boost r887.boost into r902;
    cast r896 r897 r898 r899 r900 r901 r902 into r903 as validator_datum;
    ternary r872 r868.delegator r895.delegator into r904;
    ternary r872 r868.validator r895.validator into r905;
    ternary r872 r868.block_height r895.block_height into r906;
    ternary r872 r868.bonded_microcredits r895.bonded_microcredits into r907;
    ternary r872 r868.microcredits_yield_per_epoch r895.microcredits_yield_per_epoch into r908;
    ternary r872 r868.commission r895.commission into r909;
    ternary r872 r868.boost r895.boost into r910;
    cast r904 r905 r906 r907 r908 r909 r910 into r911 as validator_datum;
    ternary r871 r868.delegator r903.delegator into r912;
    ternary r871 r868.validator r903.validator into r913;
    ternary r871 r868.block_height r903.block_height into r914;
    ternary r871 r868.bonded_microcredits r903.bonded_microcredits into r915;
    ternary r871 r868.microcredits_yield_per_epoch r903.microcredits_yield_per_epoch into r916;
    ternary r871 r868.commission r903.commission into r917;
    ternary r871 r868.boost r903.boost into r918;
    cast r912 r913 r914 r915 r916 r917 r918 into r919 as validator_datum;
    ternary r871 r47.delegator r911.delegator into r920;
    ternary r871 r47.validator r911.validator into r921;
    ternary r871 r47.block_height r911.block_height into r922;
    ternary r871 r47.bonded_microcredits r911.bonded_microcredits into r923;
    ternary r871 r47.microcredits_yield_per_epoch r911.microcredits_yield_per_epoch into r924;
    ternary r871 r47.commission r911.commission into r925;
    ternary r871 r47.boost r911.boost into r926;
    cast r920 r921 r922 r923 r924 r925 r926 into r927 as validator_datum;
    ternary r870 r47.delegator r919.delegator into r928;
    ternary r870 r47.validator r919.validator into r929;
    ternary r870 r47.block_height r919.block_height into r930;
    ternary r870 r47.bonded_microcredits r919.bonded_microcredits into r931;
    ternary r870 r47.microcredits_yield_per_epoch r919.microcredits_yield_per_epoch into r932;
    ternary r870 r47.commission r919.commission into r933;
    ternary r870 r47.boost r919.boost into r934;
    cast r928 r929 r930 r931 r932 r933 r934 into r935 as validator_datum;
    ternary r870 r868.delegator r927.delegator into r936;
    ternary r870 r868.validator r927.validator into r937;
    ternary r870 r868.block_height r927.block_height into r938;
    ternary r870 r868.bonded_microcredits r927.bonded_microcredits into r939;
    ternary r870 r868.microcredits_yield_per_epoch r927.microcredits_yield_per_epoch into r940;
    ternary r870 r868.commission r927.commission into r941;
    ternary r870 r868.boost r927.boost into r942;
    cast r936 r937 r938 r939 r940 r941 r942 into r943 as validator_datum;
    ternary r869 r868.delegator r935.delegator into r944;
    ternary r869 r868.validator r935.validator into r945;
    ternary r869 r868.block_height r935.block_height into r946;
    ternary r869 r868.bonded_microcredits r935.bonded_microcredits into r947;
    ternary r869 r868.microcredits_yield_per_epoch r935.microcredits_yield_per_epoch into r948;
    ternary r869 r868.commission r935.commission into r949;
    ternary r869 r868.boost r935.boost into r950;
    cast r944 r945 r946 r947 r948 r949 r950 into r951 as validator_datum;
    ternary r869 r47.delegator r943.delegator into r952;
    ternary r869 r47.validator r943.validator into r953;
    ternary r869 r47.block_height r943.block_height into r954;
    ternary r869 r47.bonded_microcredits r943.bonded_microcredits into r955;
    ternary r869 r47.microcredits_yield_per_epoch r943.microcredits_yield_per_epoch into r956;
    ternary r869 r47.commission r943.commission into r957;
    ternary r869 r47.boost r943.boost into r958;
    cast r952 r953 r954 r955 r956 r957 r958 into r959 as validator_datum;
    cast  r132 r223 r314 r405 r496 r587 r678 r769 r860 r951 r959 into r960 as [validator_datum; 11u32];
    is.eq r960[0u32].delegator r35.delegator into r961;
    is.eq r960[0u32].validator r35.validator into r962;
    or r961 r962 into r963;
    cast 0u8 into r964 as i8;
    add 0u8 1u8 into r965;
    ternary r963 r964 11i8 into r966;
    ternary r963 r965 0u8 into r967;
    is.eq r960[1u32].delegator r35.delegator into r968;
    is.eq r960[1u32].validator r35.validator into r969;
    or r968 r969 into r970;
    cast 1u8 into r971 as i8;
    add r967 1u8 into r972;
    ternary r970 r971 r966 into r973;
    ternary r970 r972 r967 into r974;
    is.eq r960[2u32].delegator r35.delegator into r975;
    is.eq r960[2u32].validator r35.validator into r976;
    or r975 r976 into r977;
    cast 2u8 into r978 as i8;
    add r974 1u8 into r979;
    ternary r977 r978 r973 into r980;
    ternary r977 r979 r974 into r981;
    is.eq r960[3u32].delegator r35.delegator into r982;
    is.eq r960[3u32].validator r35.validator into r983;
    or r982 r983 into r984;
    cast 3u8 into r985 as i8;
    add r981 1u8 into r986;
    ternary r984 r985 r980 into r987;
    ternary r984 r986 r981 into r988;
    is.eq r960[4u32].delegator r35.delegator into r989;
    is.eq r960[4u32].validator r35.validator into r990;
    or r989 r990 into r991;
    cast 4u8 into r992 as i8;
    add r988 1u8 into r993;
    ternary r991 r992 r987 into r994;
    ternary r991 r993 r988 into r995;
    is.eq r960[5u32].delegator r35.delegator into r996;
    is.eq r960[5u32].validator r35.validator into r997;
    or r996 r997 into r998;
    cast 5u8 into r999 as i8;
    add r995 1u8 into r1000;
    ternary r998 r999 r994 into r1001;
    ternary r998 r1000 r995 into r1002;
    is.eq r960[6u32].delegator r35.delegator into r1003;
    is.eq r960[6u32].validator r35.validator into r1004;
    or r1003 r1004 into r1005;
    cast 6u8 into r1006 as i8;
    add r1002 1u8 into r1007;
    ternary r1005 r1006 r1001 into r1008;
    ternary r1005 r1007 r1002 into r1009;
    is.eq r960[7u32].delegator r35.delegator into r1010;
    is.eq r960[7u32].validator r35.validator into r1011;
    or r1010 r1011 into r1012;
    cast 7u8 into r1013 as i8;
    add r1009 1u8 into r1014;
    ternary r1012 r1013 r1008 into r1015;
    ternary r1012 r1014 r1009 into r1016;
    is.eq r960[8u32].delegator r35.delegator into r1017;
    is.eq r960[8u32].validator r35.validator into r1018;
    or r1017 r1018 into r1019;
    cast 8u8 into r1020 as i8;
    add r1016 1u8 into r1021;
    ternary r1019 r1020 r1015 into r1022;
    ternary r1019 r1021 r1016 into r1023;
    is.eq r960[9u32].delegator r35.delegator into r1024;
    is.eq r960[9u32].validator r35.validator into r1025;
    or r1024 r1025 into r1026;
    cast 9u8 into r1027 as i8;
    add r1023 1u8 into r1028;
    ternary r1026 r1027 r1022 into r1029;
    ternary r1026 r1028 r1023 into r1030;
    gt r1030 1u8 into r1031;
    ternary r1031 r1029 11i8 into r1032;
    lt r1032 2i8 into r1033;
    ternary r1033 r960[2u32].delegator r960[1u32].delegator into r1034;
    lt r1032 3i8 into r1035;
    ternary r1035 r960[3u32].delegator r960[2u32].delegator into r1036;
    lt r1032 4i8 into r1037;
    ternary r1037 r960[4u32].delegator r960[3u32].delegator into r1038;
    lt r1032 5i8 into r1039;
    ternary r1039 r960[5u32].delegator r960[4u32].delegator into r1040;
    lt r1032 6i8 into r1041;
    ternary r1041 r960[6u32].delegator r960[5u32].delegator into r1042;
    lt r1032 7i8 into r1043;
    ternary r1043 r960[7u32].delegator r960[6u32].delegator into r1044;
    lt r1032 8i8 into r1045;
    ternary r1045 r960[8u32].delegator r960[7u32].delegator into r1046;
    lt r1032 9i8 into r1047;
    ternary r1047 r960[9u32].delegator r960[8u32].delegator into r1048;
    lt r1032 10i8 into r1049;
    ternary r1049 r960[10u32].delegator r960[9u32].delegator into r1050;
    cast  r960[0u32].delegator r1034 r1036 r1038 r1040 r1042 r1044 r1046 r1048 r1050 into r1051 as [address; 10u32];
    set r1051 into top_validators[0u8];
    set r35 into validator_data[r0];






function remove_delegator:
    async remove_delegator self.caller into r0;
    output r0 as pondo_oracle.aleo/remove_delegator.future;

finalize remove_delegator:
    input r0 as address.public;
    rem block.height 80_888u32 into r1;
    lt r1 78_008u32 into r2;
    assert.eq r2 true;
    contains delegator_to_validator[r0] into r3;
    branch.eq r3 false to end_then_0_0;
    remove delegator_to_validator[r0];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;
    contains validator_data[r0] into r4;
    branch.eq r4 false to end_then_0_2;
    remove validator_data[r0];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    get top_validators[0u8] into r5;
    is.eq r5[0u32] r0 into r6;
    ternary r6 pondo_oracle.aleo r5[0u32] into r7;
    is.eq r5[1u32] r0 into r8;
    ternary r8 pondo_oracle.aleo r5[1u32] into r9;
    is.eq r5[2u32] r0 into r10;
    ternary r10 pondo_oracle.aleo r5[2u32] into r11;
    is.eq r5[3u32] r0 into r12;
    ternary r12 pondo_oracle.aleo r5[3u32] into r13;
    is.eq r5[4u32] r0 into r14;
    ternary r14 pondo_oracle.aleo r5[4u32] into r15;
    is.eq r5[5u32] r0 into r16;
    ternary r16 pondo_oracle.aleo r5[5u32] into r17;
    is.eq r5[6u32] r0 into r18;
    ternary r18 pondo_oracle.aleo r5[6u32] into r19;
    is.eq r5[7u32] r0 into r20;
    ternary r20 pondo_oracle.aleo r5[7u32] into r21;
    is.eq r5[8u32] r0 into r22;
    ternary r22 pondo_oracle.aleo r5[8u32] into r23;
    is.eq r5[9u32] r0 into r24;
    ternary r24 pondo_oracle.aleo r5[9u32] into r25;
    is.eq r7 pondo_oracle.aleo into r26;
    ternary r26 r9 r7 into r27;
    ternary r26 r7 r9 into r28;
    is.eq r28 pondo_oracle.aleo into r29;
    ternary r29 r11 r28 into r30;
    ternary r29 r28 r11 into r31;
    is.eq r31 pondo_oracle.aleo into r32;
    ternary r32 r13 r31 into r33;
    ternary r32 r31 r13 into r34;
    is.eq r34 pondo_oracle.aleo into r35;
    ternary r35 r15 r34 into r36;
    ternary r35 r34 r15 into r37;
    is.eq r37 pondo_oracle.aleo into r38;
    ternary r38 r17 r37 into r39;
    ternary r38 r37 r17 into r40;
    is.eq r40 pondo_oracle.aleo into r41;
    ternary r41 r19 r40 into r42;
    ternary r41 r40 r19 into r43;
    is.eq r43 pondo_oracle.aleo into r44;
    ternary r44 r21 r43 into r45;
    ternary r44 r43 r21 into r46;
    is.eq r46 pondo_oracle.aleo into r47;
    ternary r47 r23 r46 into r48;
    ternary r47 r46 r23 into r49;
    is.eq r49 pondo_oracle.aleo into r50;
    ternary r50 r25 r49 into r51;
    ternary r50 r49 r25 into r52;
    cast  r27 r30 r33 r36 r39 r42 r45 r48 r51 r52 into r53 as [address; 10u32];
    set r53 into top_validators[0u8];




function pondo_ban_validator:
    input r0 as address.public;
    assert.neq r0 pondo_oracle.aleo;
    async pondo_ban_validator r0 self.caller into r1;
    output r1 as pondo_oracle.aleo/pondo_ban_validator.future;

finalize pondo_ban_validator:
    input r0 as address.public;
    input r1 as address.public;
    get control_addresses[r1] into r2;
    not r2 into r3;
    assert.eq r3 true;
    set true into banned_validators[r0];




function ban_validator:
    input r0 as address.public;
    async ban_validator r0 into r1;
    output r1 as pondo_oracle.aleo/ban_validator.future;

finalize ban_validator:
    input r0 as address.public;
    get validator_data[r0] into r1;
    rem block.height 80_888u32 into r2;
    gte r2 2_880u32 into r3;
    assert.eq r3 true;
    add 50u8 1u8 into r4;
    cast false r4 into r5 as committee_state;
    get.or_use credits.aleo/committee[r1.validator] r5 into r6;
    not r6.is_open into r7;
    gt r6.commission 50u8 into r8;
    or r7 r8 into r9;
    assert.eq r9 true;
    set true into banned_validators[r1.validator];




function unban_validator:
    input r0 as address.public;
    input r1 as signature.public;
    input r2 as address.public;
    input r3 as signature.public;
    input r4 as address.public;
    input r5 as signature.public;
    input r6 as address.public;
    input r7 as u64.public;
    hash.bhp256 r0 into r8 as field;
    cast r8 5u8 r7 into r9 as admin_operation;
    hash.bhp256 r9 into r10 as field;
    sign.verify r1 r2 r10 into r11;
    sign.verify r3 r4 r10 into r12;
    sign.verify r5 r6 r10 into r13;
    and r11 r12 into r14;
    and r14 r13 into r15;
    assert.eq r15 true;
    assert.neq r2 r4;
    assert.neq r2 r6;
    assert.neq r4 r6;
    async unban_validator r0 r2 r4 r6 r9 into r16;
    output r16 as pondo_oracle.aleo/unban_validator.future;

finalize unban_validator:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as admin_operation.public;
    get control_addresses[r1] into r5;
    get control_addresses[r2] into r6;
    get control_addresses[r3] into r7;
    and r5 r6 into r8;
    and r8 r7 into r9;
    assert.eq r9 true;
    contains admin_operations[r4.request_id] into r10;
    assert.eq r10 false;
    set r4 into admin_operations[r4.request_id];
    remove banned_validators[r0];




function set_pondo_tvl:
    input r0 as u64.public;
    assert.eq self.caller pondo_core_protocol.aleo;
    async set_pondo_tvl r0 into r1;
    output r1 as pondo_oracle.aleo/set_pondo_tvl.future;

finalize set_pondo_tvl:
    input r0 as u64.public;
    set r0 into pondo_tvl[0u8];




function ban_self:
    input r0 as address.private;
    async ban_self r0 self.caller into r1;
    output r1 as pondo_oracle.aleo/ban_self.future;

finalize ban_self:
    input r0 as address.public;
    input r1 as address.public;
    get credits.aleo/withdraw[r0] into r2;
    assert.eq r2 r1;
    contains credits.aleo/committee[r0] into r3;
    assert.eq r3 true;
    set true into banned_validators[r0];




function boost_validator:
    input r0 as address.public;
    input r1 as u64.public;
    call credits.aleo/transfer_public_as_signer pondo_core_protocol.aleo r1 into r2;
    async boost_validator r2 r0 r1 into r3;
    output r3 as pondo_oracle.aleo/boost_validator.future;

finalize boost_validator:
    input r0 as credits.aleo/transfer_public_as_signer.future;
    input r1 as address.public;
    input r2 as u64.public;
    await r0;
    div block.height 80_888u32 into r3;
    rem block.height 80_888u32 into r4;
    gte r4 78_008u32 into r5;
    not r5 into r6;
    assert.eq r6 true;
    cast 0u32 0u64 into r7 as validator_boost;
    get.or_use validator_boosting[r1] r7 into r8;
    is.eq r8.epoch r3 into r9;
    add r8.boost_amount r2 into r10;
    ternary r9 r10 r2 into r11;
    cast r3 r11 into r12 as validator_boost;
    set r12 into validator_boosting[r1];

